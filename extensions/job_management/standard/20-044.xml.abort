<?xml version="1.0" encoding="UTF-8"?>
<ogc-standard xmlns="https://www.metanorma.org/ns/ogc" type="semantic" version="2.5.14" schema-version="v1.3.3">
<bibdata type="standard">
<title language="en" format="text/plain">OGC API - Processes - Part 4: Job Management</title>
<docidentifier type="ogc-external">http://www.opengis.net/doc/IS/ogcapi-processes-2/1.0</docidentifier><docidentifier type="ogc-internal" primary="true">20-044</docidentifier><docnumber>20-044</docnumber><date type="published"><on>yyyy-mm-dd</on></date><date type="issued"><on>yyyy-mm-dd</on></date><date type="received"><on>yyyy-mm-dd</on></date><contributor><role type="author"/><organization>
<name>Geolabs</name>
</organization></contributor><contributor><role type="author"/><organization>
<name>CubeWerx Inc</name>
</organization></contributor><contributor><role type="author"/><organization>
<name>Terradue Srl.</name>
</organization></contributor><contributor><role type="author"/><organization>
<name>Wuhan University (WHU).</name>
</organization></contributor><contributor><role type="author"/><organization>
<name>Computer Research Institute of Montréal (CRIM).</name>
</organization></contributor><contributor><role type="editor"/><person>
<name><completename>Gérald Fenoy</completename></name>
</person></contributor><contributor><role type="publisher"/><organization>
<name>Open Geospatial Consortium</name>
<abbreviation>OGC</abbreviation></organization></contributor><edition>1.0</edition><language>en</language><script>Latn</script><abstract><p>OGC API Standards define modular API building blocks to spatially enable Web APIs in a consistent way. The <eref type="inline" bibitemid="OpenAPI-Spec" citeas="OpenAPI Specification 3.0.2">OpenAPI specification</eref> is used to define the API building blocks.</p>

<p>The OGC API Processes Standard (aka Processes API) defines API building blocks to describe, execute, monitor and retrieve results of Web-accessible processes. OGC API Processes is comprised of multiple parts, each of them is a separate OGC Standard.</p>

<p>OGC API - Processes - Part 2: Deploy, Replace, Undeploy extends the core capabilities specified in OGC API - Processes - Part 1: Core [<eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>] with the ability to dynamically add, modify and/or delete individual processes using an implementation (endpoint) of the OGC API - Processes Standard.</p>

<admonition type="caution"><p>This is a DRAFT version of the 2nd part of the OGC API - Processes standards. This draft is not complete and there are open issues that are still under discussion.</p>
</admonition></abstract><status><stage>draft</stage></status><copyright><from>2019</from><owner><organization>
<name>Open Geospatial Consortium</name>
<abbreviation>OGC</abbreviation></organization></owner></copyright><keyword>process</keyword><keyword>collection</keyword><keyword>instance</keyword><keyword>spatial</keyword><keyword>data</keyword><keyword>openapi</keyword><keyword>transactions</keyword><keyword>insert</keyword><keyword>update</keyword><keyword>delete</keyword><keyword>add</keyword><keyword>remove</keyword><keyword>deploy</keyword><keyword>undeploy</keyword><keyword>REST</keyword><keyword>PUT</keyword><keyword>POST</keyword><keyword>DELETE</keyword><ext><doctype>standard</doctype><subdoctype>implementation</subdoctype></ext></bibdata><metanorma-extension><table id="_misccontainer_anchor_aliases"><tbody><tr><th>ats_dru_mutable-process</th><td>/req/dru/mutable-process</td></tr><tr><th>ats_dru_test-process</th><td>/req/dru/test-process</td></tr><tr><th>ats_dru</th><td>http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/deploy-replace-undeploy</td></tr><tr><th>_f7ee31b4-f02b-4ada-a34f-569b063612d1</th><td>/conf/dru/static-indicator</td></tr><tr><th>_2c99dc51-ecdc-4480-b23e-d5f831205920</th><td>/conf/dru/deploy/post-op</td></tr><tr><th>_5b5ebd3a-cd9f-408a-9905-09b91d420c6d</th><td>/conf/dru/deploy/content-type</td></tr><tr><th>_8e36ae58-5789-4dd1-80b9-956967dc8c22</th><td>/conf/dru/deploy/unsupported-content-type</td></tr><tr><th>_7843c6bd-67d7-4dc9-83da-c11f9cfe41a1</th><td>/conf/dru/replace/put-op</td></tr><tr><th>_231f2a7f-6dd1-4bfe-b304-5c64040f15d8</th><td>/conf/dru/replace/content-type</td></tr><tr><th>_79103ae8-bdc4-4213-98b6-32a8b280f7c3</th><td>/conf/dru/undeploy/delete-op</td></tr><tr><th>_64a67495-1e74-46e8-990a-ad273a56a7e2</th><td>/conf/dru/undeploy/response</td></tr><tr><th>_2ca56830-1a16-4fae-9722-8eca5cd08d27</th><td>/conf/dru/undeploy/response-immutable</td></tr><tr><th>ats_dru_static-indicator</th><td>/conf/dru/static-indicator</td></tr><tr><th>ats_dru_deploy_post-op</th><td>/conf/dru/deploy/post-op</td></tr><tr><th>ats_dru_deploy_content-type</th><td>/conf/dru/deploy/content-type</td></tr><tr><th>ats_dru_deploy_unsupported-content-type</th><td>/conf/dru/deploy/unsupported-content-type</td></tr><tr><th>ats_dru_replace_put-op</th><td>/conf/dru/replace/put-op</td></tr><tr><th>ats_dru_replace_content-type</th><td>/conf/dru/replace/content-type</td></tr><tr><th>ats_dru_undeploy_delete-op</th><td>/conf/dru/undeploy/delete-op</td></tr><tr><th>ats_dru_undeploy_response</th><td>/conf/dru/undeploy/response</td></tr><tr><th>ats_dru_undeploy_response-immutable</th><td>/conf/dru/undeploy/response-immutable</td></tr><tr><th>ats_ogcapppkg</th><td>http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/ogcapppkg</td></tr><tr><th>_b663cbca-b5f5-44f3-a97c-246087f2c4e3</th><td>/conf/ogcapppkg/deploy/body</td></tr><tr><th>_682969d9-d3b8-46ed-a88e-2fe35852baa3</th><td>/conf/ogcapppkg/deploy/response</td></tr><tr><th>_d3f14213-fdd8-489e-a3ca-935b8f764f40</th><td>/conf/ogcapppkg/deploy/response-success</td></tr><tr><th>_ead29a44-1dc5-4fd3-99a9-c92103b5d9e3</th><td>/conf/ogcapppkg/deploy/response-duplicate</td></tr><tr><th>_981d7d56-4bdc-4ed2-8d10-e3a1988a2423</th><td>/conf/ogcapppkg/replace/body</td></tr><tr><th>_6f6e06b2-ccf3-4b2a-bba0-0e4f72efcd51</th><td>/conf/ogcapppkg/replace/response</td></tr><tr><th>ats_ogcapppkg_deploy_body</th><td>/conf/ogcapppkg/deploy/body</td></tr><tr><th>ats_ogcapppkg_deploy_response</th><td>/conf/ogcapppkg/deploy/response</td></tr><tr><th>ats_ogcapppkg_deploy_response-success</th><td>/conf/ogcapppkg/deploy/response-success</td></tr><tr><th>ats_ogcapppkg_deploy_response-duplicate</th><td>/conf/ogcapppkg/deploy/response-duplicate</td></tr><tr><th>ats_ogcapppkg_replace_body</th><td>/conf/ogcapppkg/replace/body</td></tr><tr><th>ats_ogcapppkg_replace_response</th><td>/conf/ogcapppkg/replace/response</td></tr><tr><th>ats_docker</th><td>http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/docker</td></tr><tr><th>_8abd0775-f4a6-4530-8633-3a1ec8a28c99</th><td>/conf/docker/deploy/body</td></tr><tr><th>_92183e95-5148-414b-abe9-44bb78da02b5</th><td>/conf/docker/replace/body</td></tr><tr><th>ats_docker_deploy_body</th><td>/conf/docker/deploy/body</td></tr><tr><th>ats_docker_replace_body</th><td>/conf/docker/replace/body</td></tr><tr><th>ats_cwl</th><td>http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/cwl</td></tr><tr><th>_e5c50d2f-dec9-4c90-a1de-5d61ad8e454b</th><td>/conf/cwl/deploy/body</td></tr><tr><th>_0274eb63-ac42-4f63-8e23-c6b9e1affcbb</th><td>/conf/cwl/replace/body</td></tr><tr><th>ats_cwl_deploy_body</th><td>/conf/cwl/deploy/body</td></tr><tr><th>ats_cwl_replace_body</th><td>/conf/cwl/replace/body</td></tr></tbody></table><presentation-metadata><name>TOC Heading Levels</name><value>2</value></presentation-metadata><presentation-metadata><name>HTML TOC Heading Levels</name><value>2</value></presentation-metadata><presentation-metadata><name>DOC TOC Heading Levels</name><value>2</value></presentation-metadata><presentation-metadata><name>PDF TOC Heading Levels</name><value>2</value></presentation-metadata></metanorma-extension>
<boilerplate><copyright-statement>

<clause id="_copyright_notice" obligation="normative">
<title>Copyright notice</title>
<p id="_b4a0191a-6824-1f33-66b1-2183d2dbf5a5" align="center">Copyright © 2019 Open Geospatial Consortium<br/> To obtain additional rights of use, visit<link target="https://www.ogc.org/legal"/></p>
</clause>

<clause id="_note" obligation="normative">
<title>Note</title>
<p id="_11e88dba-9912-1a89-a82d-7291bf232191" align="left">Attention is drawn to the possibility that some of the elements of this document may be the subject of patent rights. The Open Geospatial Consortium shall not be held responsible for identifying any or all such patent rights.</p>

<p id="_15067213-c07b-cba0-7e18-395ab2e00ab3" align="left">Recipients of this document are requested to submit, with their comments, notification of any relevant patent claims or other intellectual property rights of which they may be aware that might be infringed by any implementation of the standard set forth in this document, and to provide supporting documentation.</p>
</clause>
</copyright-statement>

<license-statement>

<clause id="_license_agreement" obligation="normative">
<title>License Agreement</title>
<p id="_f5fe34fd-12e2-2bb7-8cd6-9d4cffa96538">Use of this document is subject to the license agreement at <link target="https://www.ogc.org/license"/></p>
</clause>
</license-statement>

<legal-statement>

<clause id="_notice_for_drafts" obligation="normative">
<title>Notice for Drafts</title>
<p id="_09caafd2-d047-3050-9095-b3f182faf86f">This document is not an OGC Standard. This document is distributed for review and comment. This document is subject to change without notice and may not be referred to as an OGC Standard.</p>

<p id="_d80fd0eb-fbfd-dec3-0ddb-92472f4d5fcf">Recipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.</p>
</clause>
</legal-statement>

<feedback-statement>

<clause id="boilerplate-standard-feedback" obligation="normative">
<p id="_bb5602d2-6eb1-e557-e221-499759fe237f">Suggested additions, changes and comments on this document are welcome and encouraged. Such suggestions may be submitted using the online change request form on OGC web site: <link target="http://ogc.standardstracker.org/"/></p>
</clause>
</feedback-statement>
</boilerplate><preface><abstract id="_abstract"><title>Abstract</title><p id="_f348fa41-f40d-e2a5-87f1-f9c8f83679ef">OGC API Standards define modular API building blocks to spatially enable Web APIs in a consistent way. The <eref type="inline" bibitemid="OpenAPI-Spec" citeas="OpenAPI Specification 3.0.2">OpenAPI specification</eref> is used to define the API building blocks.</p>

<p id="_aec4597b-4c71-399d-eae5-9b1c5a712b8a">The OGC API Processes Standard (aka Processes API) defines API building blocks to describe, execute, monitor and retrieve results of Web-accessible processes. OGC API Processes is comprised of multiple parts, each of them is a separate OGC Standard.</p>

<p id="_105b839e-b86a-e2a6-fdd5-970b868a051c">OGC API — Processes — Part 2: Deploy, Replace, Undeploy extends the core capabilities specified in OGC API — Processes — Part 1: Core [<eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>] with the ability to dynamically add, modify and/or delete individual processes using an implementation (endpoint) of the OGC API — Processes Standard.</p>

<admonition id="_bf3e680c-8523-1367-cbfe-0c0ecf4ba94b" type="caution"><p id="_3c54f463-04ab-6afb-b48c-b91e28f09168">This is a DRAFT version of the 2nd part of the OGC API — Processes standards. This draft is not complete and there are open issues that are still under discussion.</p>
</admonition></abstract><clause id="_security_considerations" type="security" obligation="informative">
<title>Security Considerations</title>
<p id="_00c9472e-dbc7-f796-a8df-a150ce697468">See <eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2">OGC API — Processes — Part 1: Core</eref>, Clause 10.4.</p>

<p id="_db346df5-19b5-7146-5d4e-a5325e9af09e">Since deploy, replace and undeploy (DRU) operations will change the processes available to a client, servers will — in almost all cases — restrict the access to these operations.</p>

<p id="_0611bcc2-7a2a-5ca0-cb43-4fbfd164ef1c">Users making modifications to process resources need to:</p>

<ol id="_ff67afea-117c-9a74-a942-ed1e486c38b5" type="arabic"><li><p id="_db72525e-d308-2d6c-f2a9-f6a3e2c689bd">Be authenticated,</p>
</li>
<li><p id="_2227f124-9aed-5059-1656-68746d33aed7">Have “modification privileges” on the processes offered through the API,</p>
</li>
<li><p id="_8533f17e-74cf-10be-1249-57ec2bc55809">Have access to one or more of the POST, PUT and/or DELETE methods on the processes / processes/{processId} endpoints.</p>
</li>
</ol>

<p id="_f2acf1d5-dc7f-f046-c093-060f2df9f0ca">The API definition, as defined in Clause 7.3 from <eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>, must reflect this in the resource paths and their available methods.</p>

<p id="_1b6daaa9-7136-4e1e-4740-1be1ed64df06">Examples in the Clauses specifying the requirements classes focus on the mechanics of the POST, PUT, and DELETE methods and exclude authentication. Since authentication will typically be required for all DRU requests, this section provides some examples/guidance:</p>

<p id="_d5adbc48-b81b-55ea-33aa-8eae1c7fb1b2">The OpenAPI definition exposed by the serve will declare the authentication schemes that an implementation of the Processes — Part 2 (DRU) supports for each operation (or for all operations in the API implementation).</p>

<p id="_91ccaf1d-bb93-09c6-590e-37ad2c1b5406">A member “security” in the OpenAPI definition object can be provided to list the default security schemes supported by all operations. Individual DRU operations can override this default by providing a “security” member for the individual operation.</p>

<example id="auth-example-1">
<name>Example OpenAPI definition with security requirements</name>
<p id="_42c9e9e4-5d63-c7d2-48e3-e625ffa0dcd3">The following OpenAPI definition declares that the API accepts either api keys in an “X-API-Key” header or Json Web Token (JWT) bearer tokens to authenticate the requestor. X-API-KEY is a custom HTTP header that can be used to secure APIs. The API implementation will decide, if an authenticated request is rejected or executed based on the privileges of the authenticated user.</p>

<sourcecode id="_fbee54d9-0b10-39f8-442f-59d7212227bf" lang="JSON">{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "My API",
    "description" : "This API ...",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://example.com/api/v1"
  } ],
  "security" : [ {
    "JWT" : [ ],
    "api_key": [ ]
  } ],
  "paths" : { },
  "components" : {
    "securitySchemes": {
      "JWT" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "api_key" : {
        "type": "apiKey",
        "name": "X-API-Key",
        "in": "header"
      }
    }
  }
}</sourcecode>

</example>

<p id="_e92cc79a-ec22-8c7b-2fdd-8d5fb68b61d5">If the authentication of a secured request fails or if the user does not have sufficient privileges, the API endpoint will return an error.</p>

<p id="_35dfb9b0-c9f8-acd6-7652-5039494b5487">In case the request does not include information to authenticate the user, the server will respond with a 401 response (“Unauthorized”). The response will include a “WWW-Authenticate” header with hints as to how authentication credentials are provided.</p>

<sourcecode id="auth-example-2"><name>Unauthorized request</name>Client                                                        Server
  |                                                             |
  |  DELETE /processes/SampleProcess   HTTP/1.1                 |
  | -----------------------------------------------------------&gt;|
  |                                                             |
  |  HTTP/1.1  401 Unauthorized                                 |
  |  Date: Mon, 23 May 2022 11:18:45 GMT                        |
  |  WWW-Authenticate: Bearer realm="my-realm"                  |
  |  WWW-Authenticate: ApiKey header="X-API-Key"                |
  |  Content-Type: application/problem+json                     |
  |  Vary: Accept                                               |
  |  Content-Length: 86                                         |
  |                                                             |
  |  {                                                          |
  |    "status": 401,                                           |
  |    "title": "Unauthorized",                                 |
  |    "detail": "HTTP 401 Unauthorized"                        |
  |  }                                                          |
  | &lt;-----------------------------------------------------------|</sourcecode>


<note id="_6f2294dc-3ad0-21da-af60-25ee326b832d"><p id="_a258995f-7c33-98d3-cf06-166581d31773">HTTP WWW-Authenticate header is a response-type header. It serves as a support for various authentication mechanisms which are important to control access to pages and other resources as well. All of these mechanisms are based on the use of the 401 status code. The HTTP WWW-Authenticate response header defines the authentication method that ought to be wont to gain access to a resource. As discussed earlier, the WWW-Authenticate header is sent along with a 401 Unauthorized response. (GeeksforGeeks.org, 2023)</p>
</note>

<p id="_d66b17ec-b8a2-9487-cef8-4655b68685cf">If valid authentication credentials have been provided, but the API refuses to execute the operation, because the user has insufficient privileges, the server will typically return a 403 response (“Forbidden”).</p>

<sourcecode id="auth-example-3"><name>Forbidden request</name>Client                                                              Server
  |                                                                   |
  | DELETE /processes/SampleProcess HTTP/1.1                          |
  | Host: example.com                                                 |
  | Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ97HgQ    |
  |------------------------------------------------------------------&gt;|
  |                                                                   |
  | HTTP/1.1 403 Forbidden                                            |
  | Date: Mon, 23 May 2022 11:18:55 GMT                               |
  | Content-Type: application/problem+json                            |
  | Vary: Accept                                                      |
  | Content-Length: 80                                                |
  |                                                                   |
  | {                                                                 |
  |   "status" : 403,                                                 |
  |   "title" : "Forbidden",                                          |
  |   "detail" : "HTTP 403 Forbidden"                                 |
  | }                                                                 |
  |&lt;------------------------------------------------------------------|</sourcecode>


<p id="_231862aa-282a-0289-7ee9-35ddd11d76db">However, for security reasons, the server may also decide to return other status codes to hide information from a potential attacker. For example, the server may decide to return a 401 response even for a valid, but un-privileged user. Or the server may return a 404 response (“Not Found”) to hide the fact that the resource exists in the first place, typically if the user would also not be privileged to fetch the resource with a GET operation.</p>
</clause><submitters id="_submitters">
<title>Submitters</title>
<p id="_feaa5b51-ad60-39cf-a4bd-25c944916941">All questions regarding this submission should be directed to the editors or the submitters:</p>

<table id="_e8d47847-d966-c906-f678-51a255cb55c9" unnumbered="true"><thead><tr><th valign="middle" align="left">Name</th>
<th valign="middle" align="left">Affiliation</th>
</tr></thead>
<tbody><tr><td valign="middle" align="left">Panagiotis (Peter) A. Vretanos <em>(editor)</em></td>
<td valign="middle" align="left">CubeWerx Inc.</td>
</tr><tr><td valign="middle" align="left">Gérald Fenoy <em>(editor)</em></td>
<td valign="middle" align="left">GeoLabs</td>
</tr><tr><td valign="middle" align="left">Pedro Gonçalves</td>
<td valign="middle" align="left">Terradue Srl.</td>
</tr></tbody>
</table>
</submitters></preface><sections>

<clause id="_scope" type="scope" obligation="normative">
<title>Scope</title>
<p id="_6300b085-2cb7-45d0-11a8-66865dedc2ed">The OGC API — Processes — Part 2 Standard is an extension to the OGC API – Processes – Part 1: Core Standard [<eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>] and defines the behavior of a server that supports the ability to dynamically add, replace and/or undeploy processes via an OGC API — Processes implementation instance.</p>

<p id="_9132ace4-d7a3-c579-4c4e-f318a235c5bf">Specifically, the Processes Part 2 Standard specifies:</p>

<ul id="_ab11839b-740a-a503-cab9-64e7a93e0549"><li><p id="_7bbbe562-79ea-9d98-1665-be6ff896a312">How to deploy a new process.</p>
</li>
<li><p id="_707aa1cb-d8f8-8e6b-0191-2b71ea7d7d23">How to replace an existing process.</p>
</li>
<li><p id="_4987a9a5-1390-3fdb-7093-472ea382653f">How to undeploy an existing process.</p>
</li>
</ul>

<p id="_797c3888-8e4a-9346-ccae-331ff484ceb4">The following table crosswalks each of the resource endpoints discussed in this Standard with the HTTP methods POST, PUT and DELETE. Each intersecting cell in the table either contains the name of the operation for that combination of resource endpoint and HTTP method, or it contains the phrase “n/a” which is used to indicate that this Standard does not specify any behavior for that combination of resource endpoints and the HTTP method.</p>

<table id="endpoint_method_matrix"><colgroup><col width="57.4712%"/><col width="13.7931%"/><col width="14.9425%"/><col width="13.7932%"/></colgroup>
<name>Supported HTTP methods by resource</name>
<thead><tr><th valign="middle" align="left">Resource endpoint</th>
<th colspan="3" valign="middle" align="left">HTTP method</th>
</tr></thead>
<tbody><tr><td valign="middle" align="left"/><td valign="middle" align="left"><strong>POST</strong></td>
<td valign="middle" align="left"><strong>PUT</strong></td>
<td valign="middle" align="left"><strong>DELETE</strong></td>
</tr><tr><td valign="middle" align="left"><tt>/processes</tt></td>
<td valign="middle" align="left"><xref target="deploy">deploy</xref></td>
<td valign="middle" align="left">n/a</td>
<td valign="middle" align="left">n/a</td>
</tr><tr><td valign="middle" align="left"><tt>/processes/{processId}</tt></td>
<td valign="middle" align="left">n/a</td>
<td valign="middle" align="left"><xref target="replace">replace</xref></td>
<td valign="middle" align="left"><xref target="undeploy">undeploy</xref></td>
</tr></tbody>
</table>
</clause>

<clause id="_conformance" type="conformance" obligation="normative">
<title>Conformance</title>
<p id="_9ab1a2e9-3da4-8b59-29d3-80b9807f56d3">The OGC API — Processes — Part 2 Standard defines the following requirements classes.</p>

<p id="_683e2e8b-abb1-35f1-0206-6501d2cc86b1">The main requirements class is:</p>

<ul id="_f9552210-fd30-8e13-4b61-812efd18dc29"><li><p id="_11d40bc7-39b1-1cfe-5d7f-cdd4ee6fe1f0"><xref target="rc_deploy-replace-undeploy">Deploy, Replace, Undeploy</xref>.</p>
</li>
</ul>

<p id="_0353f9a5-0426-05d4-a2fa-23e136bef199">This class specifies requirements that any Web API implementing Processes Part 2 must conform with.</p>

<p id="_ee7b3556-6476-c498-126a-30e00f720cfc">The <tt>Deploy, Replace, Undeploy</tt> class does not mandate a specific encoding or format for the formal definition of a process.  However, the Part 2 extension defines the following conformance class:</p>

<ul id="_b331ce01-9362-89dc-b4e3-0d0106484c34"><li><p id="_c426e2c0-399b-78e5-1357-b508605cb6f0"><xref target="rc_ogcapppkg">OGC Application Package</xref></p>
</li>
</ul>

<p id="_660b11cd-66ec-fbf1-badd-eda43ac926e6">The <tt>OGC Application Package</tt> class defines the schema of a document that formally defines the inputs, outputs and other necessary metadata about a process that is to be dynamically deployed through the API.</p>

<p id="_dd062c76-4ae6-08ad-483e-04577cebd99b">The Application Package encoding is not mandatory. An implementation of this extension may choose to implement some other process description instead.  That said, the <tt>Deploy, Replace, Undeploy</tt> conformance class includes recommendations to support the <tt>OGC Application Package</tt>.</p>

<p id="_f8690137-8801-e404-2245-63f84de52df3">A requirement class is dedicated to the deployment of containers as processes:</p>

<ul id="_5fd8a7f9-740f-c81f-c96e-48a73616cc75"><li><p id="_66c15950-7a33-870f-18b2-2df8755ba5b1"><xref target="rc_docker">Docker</xref></p>
</li>
</ul>

<p id="_b2e3a6fc-2b67-2c5d-1920-27034b681cbc">In addition to the previous encoding, another conformance class is provided to enable support for the Common Workflow Language (CWL):</p>

<ul id="_8d12bf29-3d39-6c0d-fa47-e9bd2623b31d"><li><p id="_439dd673-8eba-773e-6133-deea88754be0"><xref target="rc_cwl">CWL</xref></p>
</li>
</ul>

<p id="_5934333f-19be-938d-a4ef-23e0ec9810f9">The standardization target for all Conformance class defined in this Standard is “Web API”.</p>

<p id="_6d724518-a080-efa5-b1bf-ec0d3eb98e96">Conformance with this Standard shall be checked using all the relevant tests specified in <xref target="ats"/> of this document. The framework, concepts, and methodology for testing, and the criteria to be achieved to claim conformance are specified in the OGC Compliance Testing Policies and Procedures and the OGC Compliance Testing web site.</p>
</clause>



<clause id="_terms_definitions_and_abbreviated_terms" obligation="normative" type="terms">
<title>Terms, definitions and abbreviated terms</title><p id="_2f416b57-43bc-2a3e-a854-e5e5dc805e79">This document uses the terms defined in <link target="https://portal.ogc.org/public_ogc/directives/directives.php">OGC Policy Directive 49</link>, which is based on the ISO/IEC Directives, Part 2, Rules for the structure and drafting of International Standards. In particular, the word “shall” (not “must”) is the verb form used to indicate a requirement to be strictly followed to conform to this document and OGC documents do not use the equivalent phrases in the ISO/IEC Directives, Part 2.</p>
<p id="_76fd54bc-da44-732d-e5ab-f7f7d63b7ef3">This document also uses terms defined in the OGC Standard for Modular specifications (<link target="https://portal.opengeospatial.org/files/?artifact_id=34762">OGC 08-131r3</link>), also known as the ‘ModSpec’. The definitions of terms such as standard, specification, requirement, and conformance test are provided in the ModSpec.</p>
<p id="_5af7e456-ee12-5d22-ff45-eb2571f1cf31">For the purposes of this document, the following additional terms and definitions apply.</p>

<terms id="_terms_and_definitions" obligation="normative">
<title>Terms and definitions</title>
<term id="term-Execution-unit"><preferred><expression>
<name>Execution unit</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_530ebfd3-7989-8847-2d89-2b8480e2fa99">A component containing a process that an implementation of the Processes API Part 1 can run.</p></verbal-definition></definition>
 </term>

<term id="term-Deploy"><preferred><expression>
<name>Deploy</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_001afca1-7aa6-75ca-da91-2bce78e894bf">Deploy refers to installing a desired execution unit onto a Processes API server so that client applications can interact with it as a process using the Processes API Part 1 Standard.</p></verbal-definition></definition>
 </term>

<term id="term-Replace"><preferred><expression>
<name>Replace</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_0aa6d08d-8fb9-6adb-7e72-9d4c943cf7a3">Replace refers to upgrading a deployed process from a Processes API implementation.</p></verbal-definition></definition>
 </term>

<term id="term-Undeploy"><preferred><expression>
<name>Undeploy</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_ca2c5ce1-49c5-b3ac-b08a-aff5243982b9">Undeploy refers to removing a deployed process from a Processes API implementation so that it does not appear as an available process.</p></verbal-definition></definition>
 </term>
</terms>

<definitions id="_abbreviated_terms" type="abbreviated_terms" obligation="normative">
<title>Abbreviated terms</title>
<dl id="_0d1a1300-d289-10ea-bdf6-33cc0a4d9480"><dt id="symbol-CWL">CWL</dt><dd><p id="_39817e20-e534-3875-bf59-777bb909a39d">Common Workflow Language</p>
</dd>
<dt id="symbol-DRU">DRU</dt><dd><p id="_48dab7b6-0c71-b288-3c64-e18d6b26dc55">Deploy, Replace, Undeploy</p>
</dd></dl>
</definitions></clause>

<clause id="_conventions_and_background" obligation="normative">
<title>Conventions and background</title>
<p id="_cc820a6f-d866-93a3-e271-f7886c1ecd99">See <eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>, Clause 5.</p>
</clause>

<clause id="_requirements_class_deploy_replace_undeploy_dru" obligation="normative">
<title>Requirements Class “Deploy, Replace, Undeploy (DRU)”</title>
<clause id="deploy-replace-undeploy-overview" obligation="normative">
<title>Overview</title>
<requirement id="rc_deploy-replace-undeploy" model="ogc" type="class" obligation="requirement"> <subject>Web API</subject><inherit><eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2">OGC API — Processes — Part 1: Core, Conformance Class ‘core’</eref></inherit><inherit><xref target="rfc2616">RFC 2616 (HTTP/1.1)</xref></inherit><classification><tag>label</tag><value><link target="http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/deploy-replace-undeploy"/></value></classification>
</requirement>

<p id="_4ca6d6c8-a040-e747-e584-3a5c947d2edb">A server that implements the DRU Requirements Class provides the ability to dynamically deploy, replace and undeploy processes.</p>

<p id="_2f7f4e80-e83f-0084-e9dd-5108267468be">The HTTP POST method is used to deploy a new process to the API.</p>

<p id="_06ea8972-913c-2f67-22f1-d7516d345836">The HTTP PUT method is used to replace the definition of a previously deployed processes that are accessible via the Processes API endpoint.</p>

<p id="_4187c3c7-db6d-039f-47c9-f77cbdccd0ce">Finally, the HTTP DELETE method is used to undeploy a previously deployed process that is accessible via the Processes API endpoint.</p>

<p id="_9fe3d686-90e1-b43f-cb3a-6a3fb0d9623d">Deploying or replacing a process requires that a formal description of the new or replacement process be provided by the client.  This Standard does not mandate that a specific processes description language or vocabulary be used. However, to promote interoperability, this extension defines two conformance classes:</p>

<ul id="_a1b92074-ca77-aa11-3705-c20d8a20ec16"><li><p id="_57ea364e-d7b1-a1cf-5313-d398f8950cb6"><xref target="rc_ogcapppkg">OGC Application Package</xref>, that defines a formal process description language encoded using JSON,</p>
</li>
<li><p id="_969ece2a-e9eb-6290-f589-d2c87303d125"><xref target="rc_cwl">CWL</xref>, that enables support for CWL-encoded process definition.</p>
</li>
</ul>

<p id="_f446ffac-ce2f-0030-d9fd-13119f6f0438">A recommendation is made later in this Standard that all implementations of Processes API Part 2 extension support the <tt>OGC Application Package</tt>.</p>

<clause id="deploy-replace-undeploy-http_status_codes" obligation="normative">
<title>HTTP status codes</title>
<p id="_0d7cd310-e7bc-fcb9-c323-3c57804bbe58">Clients implementing the Processes API Part 2 should be prepared to handle any legal HTTP or HTTPS status code.</p>

<p id="_89f0b819-282b-3e77-0071-cb16e2aad27b">The <strong>Status Codes</strong> listed in <xref target="status_codes"/> are of particular relevance to implementors of this Standard. Status codes 200, 201 and 404 are called out in API requirements. Therefore, support for these status codes is mandatory for all compliant implementations. The remainder of the status codes in <xref target="status_codes"/> are not mandatory, but are important for the implementation of a well functioning API implementation. Support for these status codes is strongly encouraged for both client and server implementations.</p>

<table id="status_codes"><colgroup><col width="15%"/><col width="85%"/></colgroup>
<name>Typical HTTP status codes</name>
<thead><tr><th valign="middle" align="left">Status code</th>
<th valign="middle" align="left">Description</th>
</tr></thead>
<tbody><tr><td valign="middle" align="left"><tt>200</tt></td>
<td valign="middle" align="left">A successful request.</td>
</tr><tr><td valign="middle" align="left"><tt>201</tt></td>
<td valign="middle" align="left">The server has successfully completed the operation and a new resource has been created.</td>
</tr><tr><td valign="middle" align="left"><tt>202</tt></td>
<td valign="middle" align="left">The request was accepted for processing, but the processing was not completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.</td>
</tr><tr><td valign="middle" align="left"><tt>204</tt></td>
<td valign="middle" align="left">A successful request with no additional content to send in the response.</td>
</tr><tr><td valign="middle" align="left"><tt>400</tt></td>
<td valign="middle" align="left">The server cannot or will not process the request due to an apparent client error. For example, a query parameter had an incorrect value.</td>
</tr><tr><td valign="middle" align="left"><tt>401</tt></td>
<td valign="middle" align="left">The request requires user authentication. The response includes a <tt>WWW-Authenticate</tt> header field containing a challenge applicable to the requested resource.</td>
</tr><tr><td valign="middle" align="left"><tt>403</tt></td>
<td valign="middle" align="left">The server understood the request, but is refusing to execute the request. While status code <tt>401</tt> indicates missing or bad authentication, status code <tt>403</tt> indicates that authentication is not the issue, but that the client is not authorized to perform the requested operation on the resource.</td>
</tr><tr><td valign="middle" align="left"><tt>404</tt></td>
<td valign="middle" align="left">The requested resource does not exist on the server. For example, a path parameter had an incorrect value.</td>
</tr><tr><td valign="middle" align="left"><tt>405</tt></td>
<td valign="middle" align="left">The request method is not supported. For example, a POST request was submitted, but the resource only supports GET requests.</td>
</tr><tr><td valign="middle" align="left"><tt>406</tt></td>
<td valign="middle" align="left">Content negotiation failed. For example, the <tt>Accept</tt> header submitted in the request did not support any of the media types supported by the server for the requested resource.</td>
</tr><tr><td valign="middle" align="left"><tt>412</tt></td>
<td valign="middle" align="left">The status code indicates that one or more conditions given in the request header fields evaluated to false when tested by the server.</td>
</tr><tr><td valign="middle" align="left"><tt>413</tt></td>
<td valign="middle" align="left">The server is refusing to process the request because the request content is larger than the server is willing or able to process.</td>
</tr><tr><td valign="middle" align="left"><tt>415</tt></td>
<td valign="middle" align="left">The server is refusing to service the request because the content is in a format not supported by this method on the target resource.</td>
</tr><tr><td valign="middle" align="left"><tt>422</tt></td>
<td valign="middle" align="left">The server understands the content type of the request content and the syntax of the request content is correct, but was unable to process the contained instructions. For example, the submitted resource does not meet a semantic constraint, e.g. a mandatory property is missing.</td>
</tr><tr><td valign="middle" align="left"><tt>500</tt></td>
<td valign="middle" align="left">An internal error occurred in the server.</td>
</tr></tbody>
<note id="_e20439c0-497a-8b68-1152-cd4524a855e9"><p id="_c7bc9ecf-4eec-b650-f869-13d6331becc3">Status code <tt>422</tt> is not yet an official HTTP status code, but is expected to be added by the <link target="https://www.ietf.org/archive/id/draft-ietf-httpbis-semantics-14.html#name-422-unprocessable-content">draft IETF RFC “HTTP Semantics”</link>.</p>
</note></table>



<p id="_3c931324-e44c-73af-e849-c72ada9af358">More specific guidance is provided for each resource, where applicable.</p>

<permission id="per_deploy-replace-undeploy_additional-status-codes" model="ogc"> <classification><tag>label</tag><value>/per/core/additional-status-codes</value></classification><component class="part"><p id="_414d9b94-12a0-3fb7-fe66-53f66f4158d3">Servers MAY support other HTTP protocol capabilities. Therefore, the server may return other status codes than those listed in <xref target="status_codes"/>.</p>
</component>
</permission>

<p id="_b1dd6cbd-9b9f-4250-a02f-77caf3eb447f">The API Description Document describes the HTTP status codes generated by that API imeplementation instance. This should not be an exhaustive list of all possible status codes. It is not reasonable to expect an API designer to control the use of HTTP status codes which are not generated by their software. Therefore, it is recommended that the API Description Document be limited to describing HTTP status codes relevant to the proper operation of the API application logic. Client implementations should be prepared to receive HTTP status codes in addition to those described in the API Description Document.</p>
</clause>

<clause id="cross_origin" obligation="normative">
<title>Cross-origin requests</title>
<p id="_b30beb80-1a3e-d2b3-470b-e84e9441eb5c">See <eref type="inline" bibitemid="OAFeat-1" citeas="OGC 17-069r3">OGC API — Features — Part 1: Core</eref>, section <link target="http://www.opengis.net/doc/IS/ogcapi-features-1/1.0#cross_origin">Support for cross-origin requests</link>, about the importance of supporting cross-origin requests, typically via <link target="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross-origin resource sharing (CORS)</link>.</p>
</clause>
</clause>

<clause id="_immutable_processes" obligation="normative">
<title>Immutable processes</title>
<p id="_3191355b-cf83-3572-53e8-f26c0de1e29f">The Processes API Part 2 extension recognizes that an OGC web processing API may be deployed with a set of static, built-in processes that are immutable and cannot be removed or modified via requests from a deploy-replace-undeploy API implementation.  In an API Description Document (e.g. OpenAPI), such process paths would not include support for the HTTP POST, PUT or DELETE methods.</p>

<p id="_b7f8be1d-9aa9-9e27-5db5-c68f8d79fd5b">However, to make it clear which processes in a collection (path: <tt>/processes</tt>) are built-in — and thus immutable — and which have been dynamically deployed, the processes collection schema is modified to add a flag indicating this aspect of a process.</p>

<requirement id="req_deploy-replace-undeploy_static-indicator" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/static-indicator</value></classification><component class="part"><p id="_934e09da-5dd0-0b08-bdc9-c0767ba7132c">The optional property <tt>mutable</tt> SHALL be used to indicate whether a process is a static or built-in process that is immutable or a dynamically added process that is mutable.</p>
</component><component class="part"><p id="_d452f9c5-f973-ff4c-964b-3663ab1c103f">A value of <tt>true</tt> SHALL be used to indicate that a processes is mutable and can thus be manipulated through an API request.</p>
</component><component class="part"><p id="_646f2c30-718d-3ac0-eedb-50e3dd87d461">A value of <tt>false</tt> SHALL be used to indicate that a processes is immutable and can thus not be manipulated through an API request.</p>
</component><component class="part"><p id="_5c179cb2-11fa-59c1-405f-349b24dad14f">The default value SHALL be <tt>true</tt>.</p>
</component>
</requirement>

<p id="_6267d77f-d2f5-6926-9d88-bffe11d26090">The following schema fragment extends the process summary accessible via the <tt>/processes</tt> path to add the <tt>mutable</tt> property.</p>

<sourcecode id="_27ffc14f-ef5a-88f4-9ec1-8a79fc776203" lang="yaml" unnumbered="true">allOf:
  - $ref: "https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/processSummary.yaml"
  - type: object
    properties:
      mutable:
        type: boolean
        default: true</sourcecode>

</clause>

<clause id="deploy" obligation="normative">
<title>Deploying a new process to the API</title>
<clause id="_sequence_diagram" obligation="normative">
<title>Sequence diagram</title>
<p id="_90b10791-df2f-40d6-3383-966a316d13eb">The following diagram illustrates the sequence diagram for deploying a new process to the API:</p>

<sourcecode id="_3a42cc81-2d98-1733-7372-b3ed9e57a2fb">Client                                                        Server
  |                                                             |
  |  POST /processes   HTTP/1.1                                 |
  |  Content-Type: application/ogcapppkg+json                   |
  |                                                             |
  |  ... Body contains a formal description of the process to   |
  |      add (e.g. OGC Application Package) ...                 |
  |------------------------------------------------------------&gt;|
  |                                                             |
  |  HTTP/1.1 201 Created                                       |
  |  Location: /processes/{processId}                           |
  |&lt;------------------------------------------------------------|</sourcecode>

</clause>

<clause id="_operation" obligation="normative">
<title>Operation</title>
<requirement id="req_deploy-replace-undeploy_deploy_post-op" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/post-op</value></classification><component class="part"><p id="_c58a98d8-141a-b4b5-1879-59ba257e6219">The server SHALL support the HTTP POST operation at the path <tt>/processes</tt>.</p>
</component>
</requirement>
</clause>

<clause id="_request_body" obligation="normative">
<title>Request body</title>
<clause id="_overview" obligation="normative">
<title>Overview</title>
<requirement id="req_deploy-replace-undeploy_deploy_body" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/body</value></classification><component class="part"><p id="_d4cfb1e3-a670-c4be-fe9d-94b63c855ba2">The body of the POST request SHALL contain a formal description of the process to be dynamically deployed to the API.</p>
</component>
</requirement>

<permission id="per_deploy-replace-undeploy_deploy_body" model="ogc"> <classification><tag>label</tag><value>/per/deploy-replace-undeploy/deploy/body</value></classification><component class="part"><p id="_56010d13-c64d-6873-3f9a-37c3ab08f688">A server MAY support any processes description encoding in the body of a HTTP POST operation.</p>
</component>
</permission>

<requirement id="req_deploy-replace-undeploy_deploy_content-type" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/content-type</value></classification><component class="part"><p id="_5fbd1be4-f16b-e2b7-4cbf-19f6727ad9b8">The <tt>Content-Type</tt> <link target="https://tools.ietf.org/html/rfc2616#section-14.17">header</link> SHALL be used to declare the media type of the request body containing a description of the processes to be added to the API.</p>
</component>
</requirement>

<p id="_7b9e48d9-8c93-052c-1c98-1bbe85bfd7a4">See <link target="https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.5">section 3.1.1.5 of RFC 7231</link> for details.</p>
</clause>

<clause id="_ogc_application_package_body" obligation="normative">
<title>OGC Application Package body</title>
<recommendation id="rec_deploy-replace-undeploy_deploy_body-ogcapppkg" model="ogc"> <classification><tag>label</tag><value>/rec/deploy-replace-undeploy/deploy/body-ogcapppkg</value></classification><component class="part"><p id="_24dea67e-a27b-ffe6-8b79-8d78c8292926">If a process can be represented for the intended use as an <xref target="rc_ogcapppkg">OGC Application Package</xref>, implementations SHOULD consider supporting the <xref target="rc_ogcapppkg">OGC Application Package</xref> encoding for describing the process to be added to the API.</p>
</component>
</recommendation>
</clause>

<clause id="_cwl_body" obligation="normative">
<title>CWL body</title>
<recommendation id="rec_deploy-replace-undeploy_deploy_body-cwl" model="ogc"> <classification><tag>label</tag><value>/rec/deploy-replace-undeploy/deploy/body-cwl</value></classification><component class="part"><p id="_ef84e921-d9f9-3f45-8d91-653d45529b5e">If a process can be encoded for the intended use in <xref target="rc_cwl">CWL</xref>, implementations SHOULD consider supporting the <xref target="rc_cwl">CWL</xref> encoding for describing the process to be deployed to the API.</p>
</component>
</recommendation>
</clause>
</clause>

<clause id="_response" obligation="normative">
<title>Response</title>
<requirement id="req_deploy-replace-undeploy_deploy_response-pid-pid" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/response-pid</value></classification><component class="part"><p id="_68e35ad4-e130-c50e-d1eb-a70e3ef5bd68">If the operation completes, the server SHALL assign the processes identifier (i.e. <tt>{processId}</tt>) specified in the processes description for the newly added processes.</p>
</component>
</requirement>

<requirement id="req_deploy-replace-undeploy_deploy_response_success" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/response-success</value></classification><component class="part"><p id="_3647416a-6c25-54bd-0ccc-175cc0990aae">A successful execution of the operation SHALL be reported as a response with a HTTP status code <tt>201</tt>.</p>
</component><component class="part"><p id="_6cfc3b43-e970-d5ec-346e-36cba871501f">A response with HTTP status code <tt>201</tt> SHALL include a <tt>Location</tt> header with the URI of the deployed processes (path: <tt>/processes/{processId}</tt>).</p>
</component><component class="part"><p id="_bf0976b9-800c-d2f3-a807-f71a13b7e7e6">If the operation is not executed immediately, but is added to a processing queue, the response SHALL have a HTTP status code <tt>202</tt>.</p>
</component>
</requirement>

<requirement id="req_deploy-replace-undeploy_deploy_response-body" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/response-body</value></classification><component class="part"><p id="_4125d672-10b0-b9a2-dee3-34d30305fe2e">The response SHALL include a body that contains a summary description of the added process conforms to the <link target="https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/processSummary.yaml">processSummary.yaml</link> schema.</p>
</component>
</requirement>
</clause>

<clause id="_exceptions" obligation="normative">
<title>Exceptions</title>
<p id="_46e14794-d65d-5414-0208-04fa4277dd69">See <xref target="deploy-replace-undeploy-http_status_codes"/> for general guidance.</p>

<requirement id="req_deploy-replace-undeploy_deploy_unsupported-media-type" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/unsupported-media-type</value></classification><component class="part"><p id="_742a0469-2c62-6aac-9b72-e90063bf328f">If the server does not support the Content-Type header associated with the request body, the code of the response SHALL be <tt>415 Unsupported Media Type</tt>.</p>
</component><component class="part"><p id="_67052c58-60fe-13e0-1177-040db3d5c550">The content of that response SHALL be based upon the OpenAPI 3.0 schema <link target="https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/core/openapi/schemas/exception.yaml">exception.yaml</link>.</p>
</component><component class="part"><p id="_25eecb82-1eb8-0437-6646-191f08d4930b">The <tt>type</tt> of the exception SHALL be “http://www.opengis.net/def/exceptions/ogcapi-processes-2/1.0/unsupported-media-type”.</p>
</component>
</requirement>

<requirement id="req_deploy-replace-undeploy_deploy_response_duplicate" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/response-duplicate</value></classification><component class="part"><p id="_77dd25a7-6d68-271a-6169-3a2a60c0798d">If a process with the same identifier already exists on the server, the code of the response SHALL be <tt>409</tt>.</p>
</component><component class="part"><p id="_1499f644-971c-fbd6-6b2d-c10f7d0a6a2f">A response with HTTP status code <tt>409</tt> MAY include a <tt>Location</tt> header with the URI of the duplicated processes (path: <tt>/processes/{processId}</tt>).</p>
</component><component class="part"><p id="_83ee3025-7517-d667-f21d-0a8f2939a25e">The content of that response SHALL be based upon the OpenAPI 3.0 schema <link target="https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/core/openapi/schemas/exception.yaml">exception.yaml</link>.</p>
</component><component class="part"><p id="_6fa5a6f4-f77e-9cdf-9bb2-03d4bb771f5c">The <tt>type</tt> of the exception SHALL be “http://www.opengis.net/def/exceptions/ogcapi-processes-2/1.0/duplicated-process”.</p>
</component>
</requirement>

<requirement id="req_deploy-replace-undeploy_deploy_response-immutable" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/deploy/response-immutable</value></classification><component class="part"><p id="_d761b9f9-a776-a870-e918-822f7bb68f0f">If a process with the same identifier already exists on the server and is immutable, the code of the response SHALL be <tt>403</tt>.</p>
</component><component class="part"><p id="_95e6f456-d652-310a-31b6-4e4c9bc89b91">A response with HTTP status code <tt>403</tt> MAY include a <tt>Location</tt> header with the URI of the existing process (path: <tt>/processes/{processId}</tt>).</p>
</component><component class="part"><p id="_cf50412c-ed99-259a-d435-8e8ebb132b94">The content of that response shall be based upon the OpenAPI 3.0 schema <link target="https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/core/openapi/schemas/exception.yaml">exception.yaml</link>.</p>
</component><component class="part"><p id="_99bd338d-137a-4c33-797f-1aa505d824cc">The <tt>type</tt> of the exception SHALL be “http://www.opengis.net/def/exceptions/ogcapi-processes-2/1.0/immutable-process”.</p>
</component>
</requirement>
</clause>
</clause>

<clause id="replace" obligation="normative">
<title>Replacing an existing processes</title>
<clause id="_sequence_diagram_2" obligation="normative">
<title>Sequence diagram</title>
<p id="_45be11c5-ed82-8ab2-10c5-d3f130cdf5ef">The following diagram illustrates the sequence diagram for replacing a
previously deployed processes.  The identifier of the process does not change.<note id="_154437fe-3570-7df9-ce65-6540d459ee48"><p id="_1789b98d-18b8-38f6-3b4e-7c033f6f6700">The new process definition replaces the old process definition. Version control is not discussed in this Standard.</p>
</note></p>



<sourcecode id="_11a7ef41-37f2-4c7d-3d15-414b8075ffe1">Client                                                        Server
  |                                                             |
  |  PUT /processes/{processId}   HTTP/1.1                      |
  |  Content-Type: application/ogcapppkg+json                   |
  |                                                             |
  |  ... Body contains a formal description of the process to   |
  |      replace the existing process (e.g. OGC Application     |
  |      Package) ...                                           |
  |------------------------------------------------------------&gt;|
  |                                                             |
  |  HTTP/1.1 204 OK                                            |
  |&lt;------------------------------------------------------------|</sourcecode>

</clause>

<clause id="_operation_2" obligation="normative">
<title>Operation</title>
<requirement id="req_deploy-replace-undeploy_replace_put-op" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/replace/put-op</value></classification><component class="part"><p id="_135214b2-e968-9c52-8ad9-9447b3b1f90f">For every dynamically deployed processes (path ‘/processes/{processId}’), the server SHALL support the HTTP PUT operation.</p>
</component><component class="part"><p id="_af7ee822-990b-2ddc-0d93-9572e7b9edbf">The parameter ‘processId’ is each ‘id’ property in the process collection response (JSONPath: <tt>$.processes[*].id</tt>).</p>
</component>
</requirement>
</clause>

<clause id="_request_body_2" obligation="normative">
<title>Request body</title>
</clause>

<clause id="_overview_2" obligation="normative">
<title>Overview</title>
<requirement id="req_deploy-replace-undeploy_replace_body" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/replace/body*</value></classification><component class="part"><p id="_9a0d5fe1-151f-6c90-6683-206f19984eba">The body of a PUT request SHALL contain a formal description of the replacement process.</p>
</component>
</requirement>

<permission id="per_deploy-replace-undeploy_replace_body" model="ogc"> <classification><tag>label</tag><value>/per/deploy-replace-undeploy/replace/body</value></classification><component class="part"><p id="_a3ed83dc-711d-95e2-6675-43e1b2470a2c">A server MAY support any processes description encoding in the body of a HTTP PUT operation.</p>
</component>
</permission>

<requirement id="req_deploy-replace-undeploy_replace_content-type" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/replace/content-type</value></classification><component class="part"><p id="_53f8fed9-4d1a-8da4-ed62-a9270d2ea675">As per <xref target="rfc2616">HTTP 1.1</xref> (<link target="https://tools.ietf.org/html/rfc2616#section-14.17"/>) the ‘Content-Type’ header SHALL be used to indicate the media type of a request body containing the description of the replacement processes.</p>
</component>
</requirement>

<clause id="_ogc_application_package_body_2" obligation="normative">
<title>OGC Application Package body</title>
<recommendation id="rec_deploy-replace-undeploy_reaplce_body-ogcapppkg" model="ogc"> <classification><tag>label</tag><value>/rec/deploy-replace-undeploy/replace/body-ogcapppkg</value></classification><component class="part"><p id="_2f8a1ed0-7495-fd9f-be81-75598cc21309">If a process can be described for the intended use as an <xref target="rc_ogcapppkg">OGC Application Package</xref>, implementations SHOULD consider supporting the <xref target="rc_ogcapppkg">OGC Application Package</xref> encoding for describing the replacement process.</p>
</component>
</recommendation>
</clause>

<clause id="_cwl_body_2" obligation="normative">
<title>CWL body</title>
<recommendation id="rec_deploy-replace-undeploy_replace_body-cwl" model="ogc"> <classification><tag>label</tag><value>/rec/deploy-replace-undeploy/replace/body-cwl</value></classification><component class="part"><p id="_6352ddba-646d-18ad-d6ec-3248881f4d99">If a process can be encoded for the intended use in <xref target="rc_cwl">CWL</xref>, implementations SHOULD consider supporting the <xref target="rc_cwl">CWL</xref> encoding for describing the replacement process.</p>
</component>
</recommendation>
</clause>
</clause>

<clause id="_response_2" obligation="normative">
<title>Response</title>
<requirement id="req_deploy-replace-undeploy_replace_response" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/replace/response</value></classification><component class="part"><p id="_5641f092-214c-a882-0b84-c04cb4e56750">A successful execution of the operation SHALL be reported as a response with a HTTP status code <tt>200</tt> or <tt>204</tt>.</p>
</component><component class="part"><p id="_82101295-8109-43be-0021-4edd064f87f3">If the operation is not executed immediately, but is added to a processing queue, the response SHALL have a HTTP status code <tt>202</tt>.</p>
</component>
</requirement>

<p id="_fada343b-4bb4-2428-6e4a-fe345df397af">The status code depends on the server. If the server has replaced the process, the response is either <tt>200</tt> (if the response includes additional content) or <tt>204</tt> (if the response has no additional content).</p>

<p id="_8399c649-ffe0-16e9-4930-8f521d0cb3ea">If the server will process the replace request later, a <tt>202</tt> status code will be returned. In this case, the processing can succeed or fail, without further notification to the client.</p>
</clause>

<clause id="_exceptions_2" obligation="normative">
<title>Exceptions</title>
<p id="_8a087028-ffa3-3b72-d36b-94943c49ae9f">See <xref target="deploy-replace-undeploy-http_status_codes"/> for general guidance.</p>

<p id="_0e4c98cb-ca57-74e5-13ab-a5eb73b75818">If the request body’s media type is not supported by the server, then <xref target="req_deploy-replace-undeploy_deploy_unsupported-media-type">/req/deploy-replace-undeploy/deploy/unsupported-media-type</xref> applies.</p>

<p id="_3ee7310a-ca7d-a760-70c2-cb30a182ee1f">If the process with the specified identifier does not exist on the server, see requirement /req/core/process-exception/no-such-process from <eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>.</p>

<p id="_b5222760-ffca-3955-ab9e-404cc8705e54">If the process exist but is immutable then <xref target="req_deploy-replace-undeploy_deploy_response-immutable">/req/deploy-replace-undeploy/deploy/response-immutable</xref> applies.</p>
</clause>
</clause>

<clause id="undeploy" obligation="normative">
<title>Removing a processes from the API (undeployProcess)</title>
<clause id="_sequence_diagram_3" obligation="normative">
<title>Sequence diagram</title>
<p id="_b6462aca-23ec-617b-b43c-be6e502d4f14">The following diagram illustrates the sequence diagram for undeploying a previously deployed process.</p>

<sourcecode id="_70a536f7-d5d0-170b-8fc8-503f62eccbc1">Client                                                        Server
  |                                                             |
  |  DELETE /processes/{processId}   HTTP/1.1                   |
  |------------------------------------------------------------&gt;|
  |                                                             |
  |  HTTP/1.1 204 OK                                            |
  |&lt;------------------------------------------------------------|</sourcecode>

</clause>

<clause id="_operation_3" obligation="normative">
<title>Operation</title>
<requirement id="req_deploy-replace-undeploy_undeploy_delete-op" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/undeploy/delete-op</value></classification><component class="part"><p id="_86b7ea84-2fa1-ffee-f2fe-8d93c9158015">For every dynamically added process (path: <tt>/processes/{processId}</tt>), the server SHALL support the HTTP DELETE operation.</p>
</component><component class="part"><p id="_00f0df35-6984-f082-6387-11f06d07fafc">The parameter <tt>processId</tt> is each <tt>id</tt> property in the process collection response (JSONPath: <tt>$.processes[*].id</tt>).</p>
</component>
</requirement>
</clause>

<clause id="_response_3" obligation="normative">
<title>Response</title>
<requirement id="req_deploy-replace-undeploy_undeploy_response" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/undeploy/response</value></classification><component class="part"><p id="_03b8c33d-6371-0987-3ff1-19d281865f37">A successful execution of the operation SHALL be reported as a response with a HTTP status code ‘204’.</p>
</component>
</requirement>
</clause>

<clause id="_exceptions_3" obligation="normative">
<title>Exceptions</title>
<p id="_389879fa-0317-49db-e7bc-a31de010cdf8">See <xref target="deploy-replace-undeploy-http_status_codes">HTTP status codes</xref> for general guidance.</p>

<p id="_438a8c2f-fe3e-a190-e693-6e5a0d9e1fec">If the process with the specified identifier does not exist on the server, see requirement /req/core/process-exception/no-such-process from <eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>.</p>

<p id="_92667690-67e2-f17a-4b4e-5bc922a42516">If the process exist but is immutable then <xref target="req_deploy-replace-undeploy_deploy_response-immutable">/req/deploy-replace-undeploy/deploy/response-immutable</xref> applies.</p>
</clause>
</clause>

<clause id="deploy-replace-undeploy-package" obligation="normative">
<title>Retrieving the formal description</title>
<p id="_a7532ee2-3e3c-5dca-25ac-1ba2673504cf">For every mutable process, it is possible to retrieve its formal description. It corresponds to the request’s body used to deploy or replace the process.</p>

<clause id="_operation_4" obligation="normative">
<title>Operation</title>
<requirement id="req_deploy-replace-undeploy_package_get-op" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/package/get-op</value></classification><component class="part"><p id="_f8ff7355-246b-d964-00c9-52446abaa837">For every dynamically added process (using method: POST on path: /processes/{processId}), the server SHALL support the HTTP GET operation at the path <tt>/processes/{processId}/package</tt>.</p>
</component><component class="part"><p id="_a135ce4b-c061-d9ea-5cf2-8d71eba7998a">The parameter <tt>processId</tt> is each <tt>id</tt> property in the process collection response (JSONPath: <tt>$.processes[*].id</tt>).</p>
</component>
</requirement>
</clause>

<clause id="_response_4" obligation="normative">
<title>Response</title>
<clause id="_overview_3" obligation="normative">
<title>Overview</title>
<requirement id="req_deploy-replace-undeploy_package_response-success" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/package/response-success</value></classification><component class="part"><p id="_96262773-f9f5-8b6c-5d22-dfadfefdd8f7">A successful access to the resource SHALL be reported as a response with a HTTP status code <tt>200</tt>.</p>
</component>
</requirement>

<requirement id="req_deploy-replace-undeploy_package_response-body" model="ogc"> <classification><tag>label</tag><value>/req/deploy-replace-undeploy/package/response-body</value></classification><component class="part"><p id="_6556018f-2b1d-e1d2-966e-05f893607953">A response with HTTP status code <tt>200</tt> SHALL include a body that contains the request body used to deploy or replace the process.</p>
</component>
</requirement>
</clause>
</clause>

<clause id="_exceptions_4" obligation="normative">
<title>Exceptions</title>
<p id="_ca256997-aa86-d224-ada7-6a0f9d3d97b2">See <xref target="deploy-replace-undeploy-http_status_codes">HTTP status codes</xref> for general guidance.</p>

<p id="_edaf997b-8f9b-b712-b379-285f11bd37d9">If the process with the specified identifier does not exist on the server, see requirement /req/core/process-exception/no-such-process from <eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>.</p>

<p id="_b4a8a763-8015-7b0b-6c6c-17581f81a5fd">If the process exist but is immutable then <xref target="req_deploy-replace-undeploy_deploy_response-immutable">/req/deploy-replace-undeploy/deploy/response-immutable</xref> applies.</p>
</clause>
</clause>
</clause>

<clause id="_requirements_class_ogc_application_package" obligation="normative">
<title>Requirements Class “OGC Application Package”</title>
<clause id="ogcapppkg-overview" obligation="normative">
<title>Overview</title>
<requirement id="rc_ogcapppkg" model="ogc" type="class" obligation="requirement"> <subject>Web API</subject><inherit><eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2">OGC API — Processes — Part 1: Core</eref></inherit><inherit><xref target="rc_deploy-replace-undeploy">http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/deploy-replace-undeploy</xref></inherit><classification><tag>label</tag><value><link target="http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/ogcapppkg"/></value></classification>
</requirement>

<p id="_558f5bad-1b2f-dd29-e74e-66d7ceaca865">This requirements class defines the schema of an <tt>OGC Application Package</tt>. An <tt>OGC Application Package</tt> is a document that describes a process in sufficient detail so that an implementation of this extension can dynamically deploy the process and make it accessible via an OGC API — Processes implementation.</p>

<p id="_4f173a45-4615-81b0-5b81-816e7fe14ac9">The information contained in an <tt>OGC Application Package</tt> can include:</p>

<ul id="_22fb5d48-6756-9c65-34fc-90fa2fdb8867"><li><p id="_58e520b7-293d-2b78-60f9-1aa42608bd01">A formal description of the process including what inputs the process takes and what outputs the process generates.</p>
</li>
<li><p id="_d38d67e2-fde8-9745-32f8-b233c320b8a8">Either an inline or by reference execution unit which is the <tt>code</tt> that the server needs to execute whenever the process is invoked.</p>
</li>
<li><p id="_9dc68320-4de7-a39b-fe5f-5c4299d89397">Additional resource information required by the execution unit.</p>
</li>
</ul>
</clause>

<clause id="_ogc_application_package_schema" obligation="normative">
<title>OGC Application Package schema</title>
<clause id="_overview_4" obligation="normative">
<title>Overview</title>
<requirement id="req_ogcapppkg_schema" model="ogc"> <classification><tag>label</tag><value>/req/ogcapppkg/schema</value></classification><component class="part"><p id="_942d77f7-1abb-277a-13cc-127d1af3f5e0">An <tt>OGC Application Package</tt> document SHALL be based upon the OpenAPI schema <link target="http://schemas.opengis.net/ogcapi/processes/part2/1.0/openapi/schemas/ogcapppkg.yaml">ogcapppkg.yaml</link>.</p>
</component>
</requirement>

<sourcecode id="schema_ogcappkg" lang="yaml">
<name><link target="http://schemas.opengis.net/ogcapi/processes/part2/1.0/openapi/schemas/ogcapppkg.yaml">Schema for the OGC Application Package</link></name>
Unresolved directive in sections/clause_7_apppkg.adoc - include::../../../../openapi/schemas/processes-dru/ogcapppkg.yaml[]</sourcecode>

</clause>

<clause id="_processdescription_property" obligation="normative">
<title>processDescription property</title>
<p id="_5a2c10c5-9c4c-6f5e-9824-c68b0e1880f5">The formal process description (i.e. its inputs, its output, etc.) is provided, either in-line using the <tt>processDescription</tt> property or may be inferred from the information provided in the <xref target="executionUnit">execution unit</xref>.</p>

<requirement id="req_ogcapppkg_process-description" model="ogc"> <classification><tag>label</tag><value>/req/ogcapppkg/process-description</value></classification><component class="part"><p id="_9eba7f42-a69e-9ec4-90fe-85cc207edf31">The value of the processDescription property SHALL be based upon the OpenAPI schema <link target="https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/process.yaml">process.yaml</link>.</p>
</component>
</requirement>
</clause>

<clause id="executionUnit" obligation="normative">
<title>executionUnit property</title>
<p id="_e39fa6a1-0fbc-731b-cf11-bc60615b3cb6">If the schema defined for the executionUnit property of an OGC Application Package remains open, it can be restricted in other Requirements.</p>

<recommendation id="rec_ogcapppkg_execution-unit-docker" model="ogc"> <classification><tag>label</tag><value>/rec/ogcapppkg/execution-unit-docker</value></classification><component class="part"><p id="_04818b98-d951-9f54-99e4-0bdfd28a6006">If the execution unit is a Docker image, implementations SHOULD consider supporting the <xref target="rc_docker">Docker Requirements class</xref>.</p>
</component>
</recommendation>

<recommendation id="rec_ogcapppkg_execution-unit-cwl" model="ogc"> <classification><tag>label</tag><value>/rec/ogcapppkg/execution-unit-cwl</value></classification><component class="part"><p id="_d51b277e-3add-8cbb-9c74-edc82279a4af">If the execution unit is encoded in CWL, implementations SHOULD consider supporting the <xref target="rc_cwl">CWL Requirement class</xref>.</p>
</component>
</recommendation>
</clause>
</clause>

<clause id="_deploy_2" obligation="normative">
<title>Deploy</title>
<clause id="_ogc_application_package_body_3" obligation="normative">
<title>OGC Application Package body</title>
<requirement id="req_ogcappkg_deploy_body" model="ogc"> <classification><tag>label</tag><value>/req/ogcapppkg/deploy/body</value></classification><component class="part"><p id="_bfd7d6d0-06d7-b65e-64f0-40207a691994">The media type <tt>application/ogcapppkg+json</tt> SHALL be used to indicate that request body contains a processes description encoded as an <xref target="rc_ogcapppkg">OGC Application Package</xref>.</p>
</component>
</requirement>
</clause>
</clause>

<clause id="_replace_2" obligation="normative">
<title>Replace</title>
<clause id="_ogc_application_package_body_4" obligation="normative">
<title>OGC Application Package body</title>
<requirement id="req_ogcappkg_replace_body" model="ogc"> <classification><tag>label</tag><value>/req/ogcapppkg/replace/body</value></classification><component class="part"><p id="_9e5c2662-7a70-1fa1-3f5b-7b8be39ea324">The media type <tt>application/ogcapppkg+json</tt> SHALL be used to indicate that request body contains a processes description encoded as an <xref target="rc_ogcapppkg">OGC Application Package</xref>.</p>
</component>
</requirement>
</clause>
</clause>

<clause id="_formal_description" obligation="normative">
<title>Formal description</title>
<clause id="_ogc_application_package_content" obligation="normative">
<title>OGC Application Package content</title>
<requirement id="req_ogcapppkg_package_response-body" model="ogc"> <classification><tag>label</tag><value>/req/ogcapppkg/package/response-body</value></classification><component class="part"><p id="_77f57c0c-fe7c-6144-b43e-f6f2e884384a">A response with HTTP status code <tt>200</tt> SHALL include a body that contains the <xref target="rc_ogcapppkg">OGC Application Package</xref> to use to deploy the process.</p>
</component>
</requirement>
</clause>
</clause>
</clause>

<clause id="_requirements_class_docker" obligation="normative">
<title>Requirements Class “Docker”</title>
<clause id="docker-overview" obligation="normative">
<title>Overview</title>
<requirement id="rc_docker" model="ogc" type="class" obligation="requirement"> <subject>Web API</subject><inherit><eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2">OGC API — Processes — Part 1: Core</eref></inherit><inherit><xref target="rc_deploy-replace-undeploy">http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/deploy-replace-undeploy</xref></inherit><inherit><xref target="rc_ogcapppkg">http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/ogcapppkg</xref></inherit><classification><tag>label</tag><value><link target="http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/docker"/></value></classification>
</requirement>

<p id="_726aac9f-e61d-87f9-1d05-271cafaac43f">A server that implements the Docker Requirement Class supports the management of Docker image as execution units by implementing the Processes API Part2 deploy-replace-undeploy extension.</p>
</clause>

<clause id="_ogc_application_package" obligation="normative">
<title>OGC Application Package</title>
<clause id="_executionunit_property" obligation="normative">
<title>executionUnit property</title>
<clause id="_overview_5" obligation="normative">
<title>Overview</title>
<requirement id="req_docker_schema" model="ogc"> <classification><tag>label</tag><value>/req/docker/schema</value></classification><component class="part"><p id="_61c5f733-141d-b255-a6a7-4d87fbf0fe70">The <tt>executionUnit</tt> property of an <tt>OGC Application Package</tt> document SHALL be based upon the schema <link target="https://github.com/opengeospatial/ogcapi-processes/blob/master/openapi/schemas/processes-dru/executionUnit.yaml">executionUnit.yaml</link>.</p>
</component>
</requirement>

<sourcecode id="schema_executionUnit" lang="yaml">
<name><link target="https://github.com/opengeospatial/ogcapi-processes/blob/master/openapi/schemas/processes-dru/executionUnit.yaml">Schema for the Docker execution unit parameter</link></name>
Unresolved directive in sections/clause_8_docker.adoc - include::../../../../openapi/schemas/processes-dru/executionUnit.yaml[]</sourcecode>

</clause>

<clause id="_type_and_image_properties" obligation="normative">
<title>type and image properties</title>
<p id="_7788e8cc-9eb2-7607-b560-d6b87c2a2160">The execution unit can be specified by reference, using a Docker image reference.</p>

<requirement id="req_docker_execution-unit" model="ogc"> <classification><tag>label</tag><value>/req/docker/execution-unit</value></classification><component class="part"><p id="_a26b1845-2476-d80c-90dd-9f5fc1ad28e7">If the execution unit is specified as a Docker image, the  value of the <tt>type</tt> property SHALL be `docker’.</p>
</component><component class="part"><p id="_024fcdd3-76e4-43d5-1155-197fa1c76a09">If the execution unit is specified as a Docker image, the value of the <tt>image</tt> property SHALL be a reference to the Docker image.</p>
</component>
</requirement>
</clause>
</clause>
</clause>
</clause>

<clause id="_requirements_class_cwl" obligation="normative">
<title>Requirements Class “CWL”</title>
<clause id="cwl-overview" obligation="normative">
<title>Overview</title>
<requirement id="rc_cwl" model="ogc" type="class" obligation="requirement"> <subject>Web API</subject><inherit><eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2">OGC API — Processes — Part 1: Core</eref></inherit><inherit><xref target="rc_deploy-replace-undeploy">http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/deploy-replace-undeploy</xref></inherit><inherit><xref target="rc_ogcapppkg">http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/ogcapppkg</xref></inherit><inherit>Common Workflow Language <eref type="inline" bibitemid="Common_Workflow_Language" citeas="[2]"/></inherit><classification><tag>label</tag><value><link target="http://www.opengis.net/spec/ogcapi-processes-2/1.0/req/cwl"/></value></classification>
</requirement>

<p id="_e2fd7eba-6b93-da45-43e5-d9eac7d71bdb">A server that implements the CWL Requirement Class SHALL support the use of CWL encoding when interacting with the Processes API Part 2 deploy-replace-undeploy extension endpoint.</p>
</clause>

<clause id="_ogc_application_package_2" obligation="normative">
<title>OGC Application Package</title>
<clause id="_executionunit_property_2" obligation="normative">
<title>executionUnit property</title>
<p id="_cbab22f9-09ef-016d-e6f4-6b7db1a99898">In case the OGC Application Package encoding is used, the following Requirement applies.</p>

<requirement id="req_cwl_execution-unit" model="ogc"> <classification><tag>label</tag><value>/req/cwl/execution-unit</value></classification><component class="part"><p id="_09d6a8c9-efe4-c291-26be-b34e6627fc7e">If the execution unit is encoded in CWL, the content of the <tt>executionUnit</tt> parameter SHALL be an object with the following properties:</p>
<ul id="_d2cb2d11-2bec-7e58-d453-bdfc58f0ff32"><li><p id="_f54a24e3-17e7-df4d-65a3-2a50dbec8dda"><tt>type</tt>  and <tt>href</tt> if passed by reference</p>
</li>
<li><p id="_c928f173-0578-1917-6bf2-4929f897759b"><tt>value</tt> and <tt>mediaType</tt> property if passed by value</p>
</li>
</ul>
</component><component class="part"><p id="_6abe232a-405d-99f9-867b-0d184f3d24d1">If the execution unit is encoded in CWL, the value of the <tt>type</tt> property SHALL be <tt>application/cwl</tt>, when for <tt>mediaType</tt> it should be <tt>application/cwl+json</tt>.</p>
</component><component class="part"><p id="_211f85d6-ff67-a879-1ceb-cf932aa2d443">If the execution unit is encoded in CWL, the value of the <tt>href</tt> property SHALL be a reference to the CWL encoded file, when the value of the <tt>value</tt> property shall be the CWL encoded in JSON format.</p>
</component>
</requirement>

<p id="_1e095c94-a554-79e3-ca16-23963bed2bdd">Below is an example of a deploy body request using a CWL-encoded execution unit by reference.</p>

<sourcecode id="cwl_ogcapppkg_example1" unnumbered="true">{
  "executionUnit": {
    "href": "https://raw.githubusercontent.com/EOEPCA/app-snuggs/main/app-package.cwl",
    "type": "application/cwl"
  }
}</sourcecode>


<p id="_30a4b1fb-34a7-86d0-c137-3ced949666db">Below is an example of a deploy body request using a CWL-encoded execution unit by value. The value is not included for readability and results from converting from the original CWL format (YAML) into JSON.</p>

<sourcecode id="cwl_ogcapppkg_example2" unnumbered="true">{
  "executionUnit": {
    "value": { ... },
    "mediaType": "application/cwl+json"
  }
}</sourcecode>

</clause>
</clause>

<clause id="_deploy_3" obligation="normative">
<title>Deploy</title>
<clause id="_cwl_body_3" obligation="normative">
<title>CWL body</title>
<requirement id="req_cwl_deploy_body" model="ogc"> <classification><tag>label</tag><value>/req/cwl/deploy/body</value></classification><component class="part"><p id="_e88d7c4d-8cde-bde3-09a3-cc334ecfb6ee">The media type <tt>application/cwl</tt> SHALL be used to indicate that request body contains a processes description encoded as <xref target="rc_ogcapppkg">CWL</xref>.</p>
</component>
</requirement>
</clause>

<clause id="_w_parameter" obligation="normative">
<title>w parameter</title>
<p id="_300ad5ac-cc56-8906-4b41-8c56ea0c595d">When encoded in CWL, processes are identified as instances of the workflow class.</p>

<requirement id="req_cwl_w-param" model="ogc"> <classification><tag>label</tag><value>/req/cwl/deploy/w-param</value></classification><component class="part"><p id="_99c2727b-6fb2-83a0-3950-6d283e795cef">If the CWL contains more than a single workflow identifier, an additional <tt>w</tt> query parameter MAY be used to target a specific workflow id to be deployed. If not used, the first process found SHALL be deployed.</p>
</component>
</requirement>
</clause>

<clause id="_exception" obligation="normative">
<title>Exception</title>
<requirement id="req_cwl_deploy_exception-workflow-not-found" model="ogc"> <classification><tag>label</tag><value>/req/cwl/deploy/exception-workflow-not-found</value></classification><component class="part"><p id="_0eae4636-0634-9d75-39b5-5a458f94c700">If the <tt>w</tt> parameter has a value and the server cannot find the <tt>w</tt> identifier in the worflows from the body POST request, the status code SHALL be <tt>400</tt>.</p>
</component><component class="part"><p id="_094503ce-8fe8-006b-2b64-d3965d847c79">The content of that response SHALL be based upon the schema <link target="https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/core/openapi/schemas/exception.yaml">exception.yaml</link>.</p>
</component><component class="part"><p id="_ff14c90e-89bc-fbac-15e1-9858ba33f10b">The <tt>type</tt> of the exception SHALL be “http://www.opengis.net/def/exceptions/ogcapi-processes-2/1.0/workflow-not-found”.</p>
</component>
</requirement>
</clause>
</clause>

<clause id="_replace_3" obligation="normative">
<title>Replace</title>
<clause id="_cwl_body_4" obligation="normative">
<title>CWL body</title>
<requirement id="req_cwl_replace_body" model="ogc"> <classification><tag>label</tag><value>/req/cwl/replace/body</value></classification><component class="part"><p id="_1c1b6bf1-d717-b60b-3b37-412478179442">The media type <tt>application/cwl</tt> SHALL be used to indicate that request body contains a processes description encoded as <xref target="rc_ogcapppkg">CWL</xref>.</p>
</component>
</requirement>
</clause>
</clause>

<clause id="_formal_description_2" obligation="normative">
<title>Formal description</title>
<clause id="_cwl_content" obligation="normative">
<title>CWL content</title>
<requirement id="req_cwl_package_response-body" model="ogc"> <classification><tag>label</tag><value>/req/cwl/package/response-body</value></classification><component class="part"><p id="_5ac8dfa2-c249-f9fe-8ab5-bfc1e6de396b">A response with HTTP status code <tt>200</tt> SHALL include a body that contains:</p>
<ul id="_273dbd42-ea60-7b87-58d8-45c0671c3bf8"><li><p id="_68993fb5-2bbd-16b3-9431-4378c1202ede">the <xref target="rc_cwl">CWL</xref> to use to deploy the process, in case the Content-Type used to deploy the process was <tt>application/cwl</tt>.</p>
</li>
<li><p id="_49fcc9c7-8e57-bacb-2403-12ee402f587f">the <xref target="rc_ogcapppkg">OGC Application Package</xref> to use to deploy the process, in case the Content-Type used to deploy the process was <tt>application/ogcapppkg+json</tt>.</p>
</li>
</ul>
</component>
</requirement>
</clause>
</clause>
</clause>

<clause id="oas" obligation="normative">
<title>OpenAPI 3.0</title>
<p id="_eef9a84a-5b47-8959-a299-03c81f021df0">See <eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>, Clause 9.</p>
</clause>

<clause id="mediatypes" obligation="normative">
<title>Media Types</title>
<p id="_6080780f-b0c2-af5f-a7de-3f710983f91c">See <eref type="inline" bibitemid="OAProc-1" citeas="OGC 18-062r2"/>, Clause 13.</p>

<p id="_336b11f7-de2a-1b8d-0ccc-4d5721707677">Additional JSON media types that would typically be used in a server that supports JSON are:</p>

<ul id="_16838abb-ed6b-84c9-f730-5114cf16b334"><li><p id="_96fcfeb1-fbd2-8bdf-b149-393b55202b65">application/ogcapppkg+json</p>
</li>
<li><p id="_654b1dac-9a97-90a4-93fe-bab7624ce2d9">application/cwl+json</p>
</li>
</ul>

<p id="_09b68f4a-737a-09a0-4e36-02cd77248df0">Additional CWL media types that would typically be used in a server that supports CWL are:</p>

<ul id="_63216ee7-f45f-f3df-ca8a-4784288e8dbb"><li><p id="_e5d527b6-c8b0-afb7-fdda-8cd05739e0cc">application/cwl</p>
</li>
</ul>
</clause>








</sections><annex id="ats" obligation="normative">
<title>Abstract Test Suite</title>
<clause id="_introduction" obligation="normative">
<title>Introduction</title>
<p id="_02eeb7e2-ae07-7102-1d39-d9b06be62432">OGC Web Application Programming Interfaces (APIs) are not Web Services in the traditional sense. Rather, they define the behavior and content of a set of Resources exposed through a Web API. Therefore, an API endpoint may expose resources in addition to those defined by the standard. A test engine must be able to traverse an implementation of the API, identify and validate test points, and ignore resource paths which are not to be tested.</p>

<p id="_2f8f86b6-6e1a-0247-e640-59b0185eda41">The Web API under test can require authorization. Any Executable Test Suite implementing this test suite should implement the following security schemes supported by OpenAPI 3.0: HTTP Authorization schemes “basic” and “bearer”, API keys, and OAuth2 flow “authorizationCode”.</p>

<p id="_bec775f9-5f8f-c4ac-f7b5-fa1077dc891c">The following requirements apply for a server implementing the OGC API — Processes — Part 2: Deploy, Replace, Undeploy under test:</p>

<requirement id="ats_dru_mutable-process" model="ogc"> <identifier>/req/dru/mutable-process</identifier><component class="test-purpose"><p id="_18455a85-bf26-b905-70f9-1f7ca90dc849">Ensure that a mutable process is offered by the server being tested.</p>
</component><component class="test-method"><p id="_38435de2-cc39-5d0f-34b7-4a13a08eaad8">If a server implementing the OGC API — Processes — Part 2: Deploy, Replace, Undeploy is tested using CITE tests, the server SHALL offer at least one mutable process.</p>
</component>
</requirement>

<p id="_0dafad83-f495-3290-0e41-7061cf7cc876">In case both an OGC Application Package and CWL conformance classes are supported, the following requirement applies for a server implementing the OGC API — Processes — Part 2: Deploy, Replace, Undeploy being tested:</p>

<requirement id="ats_dru_test-process" model="ogc"> <identifier>/req/dru/test-process</identifier><component class="test-purpose"><p id="_4947ab48-5d04-89b0-190d-dea7100de209">Ensure that an application package URL can be provided in CWL encodig to test deploying processes using OGC Application Package and CWL conformance classes.</p>
</component><component class="test-method"><p id="_fec21f3d-ea81-4388-abed-552ad55219a9">If a server implementing the OGC API — Processes — Part 2: Deploy, Replace, Undeploy is tested using CITE tests, it should provide a URL to an example application package encoded in CWL for tests against the OGC Application Package and CWL conformance classes.</p>
</component>
</requirement>
</clause>

<clause id="_conformance_class_deploy_replace_undeploy" obligation="normative">
<title>Conformance Class Deploy, Replace, Undeploy</title>
<requirement id="ats_dru" model="ogc" type="conformanceclass">
<title>Deploy, Replace, Undeploy</title><identifier>http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/deploy-replace-undeploy</identifier><subject><xref target="rc_deploy-replace-undeploy">http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/deploy-replace-undeploy</xref></subject><classification><tag>Target Type</tag><value>Web API</value></classification><requirement id="_124c83d6-1cc2-eab7-f9e5-e745e0945664" model="ogc" type="verification"> <identifier>/conf/dru/static-indicator</identifier></requirement><requirement id="_c5ba4753-1884-d5c4-6ed7-711709e75478" model="ogc" type="verification"> <identifier>/conf/dru/deploy/post-op</identifier></requirement><requirement id="_86efc8d3-fef7-edd3-840c-2efc63c78731" model="ogc" type="verification"> <identifier>/conf/dru/deploy/content-type</identifier></requirement><requirement id="_458d2497-ecfb-a790-e8f2-76e7fa363024" model="ogc" type="verification"> <identifier>/conf/dru/deploy/unsupported-content-type</identifier></requirement><requirement id="_adaba65b-987f-0546-905e-deab781605ab" model="ogc" type="verification"> <identifier>/conf/dru/replace/put-op</identifier></requirement><requirement id="_2a47df4f-b27e-6e17-7eea-bae04cb9106c" model="ogc" type="verification"> <identifier>/conf/dru/replace/content-type</identifier></requirement><requirement id="_c6e0b13c-3051-0c08-340b-9c37ebfa3721" model="ogc" type="verification"> <identifier>/conf/dru/undeploy/delete-op</identifier></requirement><requirement id="_681be3c9-ff4f-b3da-b73f-36fc99da1113" model="ogc" type="verification"> <identifier>/conf/dru/undeploy/response</identifier></requirement><requirement id="_0f94a2e7-8058-3ee7-cea9-d5acfc71c080" model="ogc" type="verification"> <identifier>/conf/dru/undeploy/response-immutable</identifier></requirement>

</requirement>

<clause id="_immutable_processes_2" obligation="normative">
<title>Immutable processes</title>
<requirement id="ats_dru_static-indicator" model="ogc" type="abstracttest"> <identifier>/conf/dru/static-indicator</identifier><classification><tag>target</tag><value><xref target="req_deploy-replace-undeploy_static-indicator">/req/deploy-replace-undeploy/static-indicator</xref></value></classification><component class="test-purpose"><p id="_b3bebe6f-fcf9-7230-51af-269d4e03eccd">Validate that the process list contains processes with the mutable property.</p>
</component><component class="test-method"><ol id="_f5120c7b-b0b5-4d90-54ee-bc7770dc409f" type="arabic"><li><p id="_f6efbb42-d2ef-93fc-43ea-28229629822e">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_e08365c3-dc5e-bfc9-b468-b409bea18fed">Issue an HTTP GET request for each path</p>
</li>
<li><p id="_461c7a32-ca07-b08b-faad-8ba67aca957d">Validate the process list is composed of processes that get the mutable Boolean parameter set to true or false</p>
</li>
</ol>
</component>
</requirement>
</clause>

<clause id="_deploy_operation" obligation="normative">
<title>Deploy operation</title>
<requirement id="ats_dru_deploy_post-op" model="ogc" type="abstracttest"> <identifier>/conf/dru/deploy/post-op</identifier><classification><tag>target</tag><value><xref target="req_deploy-replace-undeploy_deploy_post-op">/req/deploy-replace-undeploy/deploy/post-op</xref></value></classification><component class="test-purpose"><p id="_fd26ff88-f35c-19ce-d29e-3f8fe9bb80cb">Validate that the server support HTTP POST operation at the path /processes</p>
</component><component class="test-method"><ol id="_2ba8f50e-5c8a-22a5-8a02-0bc7164cd07d" type="arabic"><li><p id="_74ccccc8-f91a-a61f-bb68-d3ad47c9d498">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_442ccc72-444e-0898-ed97-9b2b2886fa39">Issue an HTTP POST request for each path.</p>
</li>
<li><p id="_697cfa96-5071-0577-16d8-3b81b2a34f43">Validate that the response header does not contain <tt>405 Method not allowed</tt></p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_dru_deploy_content-type" model="ogc" type="abstracttest"> <identifier>/conf/dru/deploy/content-type</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/deploy/content-type</value></classification><component class="test-purpose"><p id="_e23c1da4-4e9a-a76c-9d05-55808969f62c">Validate that the server support the Content-type header to declare the media type of the request body</p>
</component><component class="test-method"><ol id="_8558df4c-d203-6eb7-2558-0f493c908fd5" type="arabic"><li><p id="_81f51aac-a257-7b4e-116d-336c53eb9c73">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_c3deb1ca-a994-9c9d-f719-7a79b12510d2">Issue an HTTP POST request associated with an unsupported media type, i.e. <tt>text/plain</tt>.</p>
</li>
<li><p id="_69530699-3932-cffc-1190-15058efb1d03">Validate the response using <xref target="ats_dru_deploy_unsupported-content-type">/conf/dru/deploy/unsupported-content-type</xref></p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_dru_deploy_unsupported-content-type" model="ogc" type="abstracttest"> <identifier>/conf/dru/deploy/unsupported-content-type</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/deploy/unsupported-content-type</value></classification><component class="test-purpose"><p id="_f980da0a-7a8e-fda5-960c-f5135b9576e9">Validate that the server returns a 415 status code with a relevant exception</p>
</component><component class="test-method"><ol id="_b14ab3e6-a303-2147-fd82-02654cfb5baf" type="arabic"><li><p id="_9860ae15-3b3c-4188-b449-3b5608a4c42f">Validate that a document was returned with an HTTP status code of 415.</p>
</li>
<li><p id="_d6cf44a8-70a0-2b29-987c-1297c72576d2">Validate that the document in the response body is conform to the <link target="https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/exception.yaml">exception.yaml</link> schema.</p>
</li>
<li><p id="_1d5ea6e2-b827-070c-a68d-25742db1f1d2">Validate that the type of the exception is “http://www.opengis.net/def/exceptions/ogcapi-processes-2/1.0/unsupported-media-type”.</p>
</li>
</ol>
</component>
</requirement>
</clause>

<clause id="_replace_operation" obligation="normative">
<title>Replace operation</title>
<requirement id="ats_dru_replace_put-op" model="ogc" type="abstracttest"> <identifier>/conf/dru/replace/put-op</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/replace/put-op</value></classification><component class="test-purpose"><p id="_cc859122-14e8-36f4-7451-8f0420100efc">Validate that the server supports HTTP PUT operation at the path /processes</p>
</component><component class="test-method"><ol id="_6b3ac58b-fef5-b696-3416-9f9099d0407d" type="arabic"><li><p id="_55f07616-325e-ae9b-3836-73e7bde61dc8">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_fc51d6b7-030b-d72a-4493-e8a7062fbc6d">Append <tt>/{processId}</tt> to each path, where <tt>{processId}</tt> is not an existing process id, i.e. <tt>not-existing-process</tt>.</p>
</li>
<li><p id="_0308f7bb-f334-d85d-45ff-fcb8c18081d5">Issue an HTTP PUT request for each path.</p>
</li>
<li><p id="_c4ad0daa-3606-4342-82b8-20bae8ad5d59">Validate that the response header does not contain <tt>405 Method not allowed</tt>.</p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_dru_replace_content-type" model="ogc" type="abstracttest"> <identifier>/conf/dru/replace/content-type</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/replace/content-type</value></classification><component class="test-purpose"><p id="_53fb4d9d-5c3a-7f84-15ff-7d1805f705ff">Validate that the server supports the Content-type header to declare the media type of the request body</p>
</component><component class="test-method"><ol id="_d5d10188-df82-d461-86a2-c8f99458a6c2" type="arabic"><li><p id="_6ab2c43d-f127-0f7f-7919-4a1b25a4448d">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_708e89ff-3e58-d44a-63bd-9c6aa4c98c66">Append <tt>/{processId}</tt> to each path, where <tt>{processId}</tt> is a mutable process id.</p>
</li>
<li><p id="_6774024f-3a71-c49d-74cd-c0596c57a44d">Issue an HTTP PUT request with an unsupported media type, i.e. <tt>text/plain</tt>, on each path.</p>
</li>
<li><p id="_b0068355-373c-9ba1-9ffe-d49e0aa31a8f">Validate the response using <xref target="ats_dru_deploy_unsupported-content-type">/conf/dru/deploy/unsupported-content-type</xref></p>
</li>
</ol>
</component>
</requirement>
</clause>

<clause id="_undeploy_operation" obligation="normative">
<title>Undeploy operation</title>
<requirement id="ats_dru_undeploy_delete-op" model="ogc" type="abstracttest"> <identifier>/conf/dru/undeploy/delete-op</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/undeploy/delete-op</value></classification><component class="test-purpose"><p id="_3d15ff99-9852-2f3a-00d7-7ebb76eaf2ba">Validate that the server supports HTTP DELETE operation at the path /processes/{processId}</p>
</component><component class="test-method"><ol id="_e0c7e9dd-bdcd-33c6-e821-86cd27973eca" type="arabic"><li><p id="_a9377d56-34c8-3f58-8737-274c15226225">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_f6e521dd-688e-9640-d1ce-7cb756f7c2de">Append <tt>/{processId}</tt> to each path, where <tt>{processId}</tt> is not an existing process id, i.e. <tt>not-existing-process</tt>.</p>
</li>
<li><p id="_349f5795-5552-b99f-c00a-2e646b69e2a4">Issue an HTTP DELETE request for each path.</p>
</li>
<li><p id="_62dfc72f-3ba3-2cd1-2d9a-77ea198aa8c5">Validate that the response header does not contain <tt>405 Method not allowed</tt>.</p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_dru_undeploy_response" model="ogc" type="abstracttest"> <identifier>/conf/dru/undeploy/response</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/undeploy/response</value></classification><component class="test-purpose"><p id="_3dd06027-7cbf-165c-9236-8109be81829e">Validate that the server returns a 204 status code when removing a mutable process</p>
</component><component class="test-method"><ol id="_655cc33d-f6af-0ab7-a7c7-60450a595447" type="arabic"><li><p id="_78b796e9-5941-5b17-ed20-6c7b5f69ad88">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_5aa3cf54-c712-0291-577e-919addc61bdf">Append <tt>/{processId}</tt> to each path, where <tt>{processId}</tt> is a mutable process id.</p>
</li>
<li><p id="_53f31b10-6595-ff55-f641-f05c28af7d1e">Issue an HTTP DELETE request on one path.</p>
</li>
<li><p id="_8343f857-ac49-200a-2db8-19b687fe7042">Validate that no content was returned with an HTTP status code of 204.</p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_dru_undeploy_response-immutable" model="ogc" type="abstracttest"> <identifier>/conf/dru/undeploy/response-immutable</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/deploy/response-immutable</value></classification><component class="test-purpose"><p id="_1ee49d32-f6b9-3ddb-0b44-062153c2f42b">Validate that the server returns a 403 status code when removing an immutable process</p>
</component><component class="test-method"><ol id="_b7015624-93a5-82ae-487a-44f941fb88fa" type="arabic"><li><p id="_414e1d51-d9ae-d350-203b-67c03fcf81ba">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_678b3e72-3112-a4a3-c26a-05adf54d7524">Append <tt>/{processId}</tt> to each path, where <tt>{processId}</tt> is not a mutable process id.</p>
</li>
<li><p id="_4f4b7f32-9ce3-4ae4-b6f2-c0e0354c2c96">Issue an HTTP DELETE request on each path.</p>
</li>
<li><p id="_11168ddd-d124-bc26-eddd-a5260ea80ed5">Validate the response contains a document content, and was returned with an HTTP status code of 403</p>
</li>
<li><p id="_7c075755-a8ff-0e47-ca3a-441546df01be">Validate the document is conform to the <link target="https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/schemas/common-core/exception.yaml">exception.yaml</link> schema.</p>
</li>
<li><p id="_17bc3935-5cc5-5712-dfb0-db41fb2ad386">Validate the type of the exception is “http://www.opengis.net/def/exceptions/ogcapi-processes-2/1.0/immutable-process”.</p>
</li>
</ol>
</component>
</requirement>
</clause>
</clause>

<clause id="_conformance_class_ogc_application_package" obligation="normative">
<title>Conformance Class OGC Application Package</title>
<requirement id="ats_ogcapppkg" model="ogc" type="conformanceclass">
<title>OGC Application Package</title><identifier>http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/ogcapppkg</identifier><subject><xref target="rc_ogcapppkg">http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/ogcapppkg</xref></subject><classification><tag>Target Type</tag><value>Web API</value></classification><requirement id="_f372b0e6-00b4-4b0a-6880-2018caa71a8f" model="ogc" type="verification"> <identifier>/conf/ogcapppkg/deploy/body</identifier></requirement><requirement id="_85e0159e-b1e1-245d-6745-76f17794ad31" model="ogc" type="verification"> <identifier>/conf/ogcapppkg/deploy/response</identifier></requirement><requirement id="_293047be-63d6-b49a-4115-e326b6265367" model="ogc" type="verification"> <identifier>/conf/ogcapppkg/deploy/response-success</identifier></requirement><requirement id="_77feb3f3-95d5-3c3e-394a-bc1a2196b9dd" model="ogc" type="verification"> <identifier>/conf/ogcapppkg/deploy/response-duplicate</identifier></requirement><requirement id="_6d1263a1-a865-19c7-e4a9-8c265b85602e" model="ogc" type="verification"> <identifier>/conf/ogcapppkg/replace/body</identifier></requirement><requirement id="_0428d684-f166-00b9-dc2f-a741877e8925" model="ogc" type="verification"> <identifier>/conf/ogcapppkg/replace/response</identifier></requirement>

</requirement>

<clause id="_deploy_operation_2" obligation="normative">
<title>Deploy operation</title>
<requirement id="ats_ogcapppkg_deploy_body" model="ogc" type="abstracttest"> <identifier>/conf/ogcapppkg/deploy/body</identifier><classification><tag>target</tag><value>/req/ogcapppkg/deploy/body</value></classification><component class="test-purpose"><p id="_0d3209e3-7f99-fbfa-bc82-26831ee66bed">Validate that the server supports OGC Application Package encoding</p>
</component><component class="test-method"><ol id="_b7c20b9e-a60f-b9ac-f4b1-908775713138" type="arabic"><li><p id="_e3890441-5dfa-3650-2799-0b86a2af42ac">Retrieve all links from the landing page with “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” and /processes</p>
</li>
<li><p id="_329f8a10-d30e-18d0-8568-082d059c7f9c">Issue an HTTP POST request using the content type “application/ogcapppkg+json” with as body a default OGC Application Package or the application package as reference, if any, on one path</p>
</li>
<li><p id="_881d1046-7478-b464-df79-4fee35b6c0ef">Validate the response with <xref target="ats_ogcapppkg_deploy_response">/conf/ogcapppkg/deploy/response</xref></p>
</li>
<li><p id="_1c8f093d-1da7-de9b-b4e3-9034c57f7999">Send the same POST request again</p>
</li>
<li><p id="_2c70b01c-1a25-c2ea-d276-ab66d81dfbae">Validate the response with <xref target="ats_ogcapppkg_deploy_response-duplicate">/conf/ogcapppkg/deploy/response-duplicate</xref></p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_ogcapppkg_deploy_response" model="ogc" type="abstracttest"> <identifier>/conf/ogcapppkg/deploy/response</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/deploy/response-success</value></classification><component class="test-purpose"><p id="_85070233-0e68-4d44-0e7c-9e5b32d01d37">Validate that the server returns HTTP Status code 201 or 202</p>
</component><component class="test-method"><ol id="_f99a4b0c-4480-1e8e-06b9-f71fb94f52a4" type="arabic"><li><p id="_7d522883-526d-c220-b9b6-cead972cdff2">Validate that a document is returned and the status code is 201 or 202</p>
</li>
<li><p id="_0fc5a935-ae25-833a-f381-27aa4f541498">If status code was 201, validate the document using <xref target="ats_ogcapppkg_deploy_response-success">/conf/ogcapppkg/deploy/response-success</xref></p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_ogcapppkg_deploy_response-success" model="ogc" type="abstracttest"> <identifier>/conf/ogcapppkg/deploy/response-success</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/deploy/response-success</value></classification><component class="test-purpose"><p id="_86419766-f29c-18ca-61d2-295656731fd1">Validate that the server returns a Location header and a process summary</p>
</component><component class="test-method"><ol id="_a9fc7584-943f-ed58-fa45-0edb895e90f9" type="arabic"><li><p id="_afb9cbec-068c-2c02-4fc1-648bd63f68c7">Validate the Location header contains a URI of the deployed process.</p>
</li>
<li><p id="_e8d1bbd6-b12a-0952-988d-2beaab9adbce">Validate the document conforms to the <link target="https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/processSummary.yaml">processSummary.yaml</link> schema.</p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_ogcapppkg_deploy_response-duplicate" model="ogc" type="abstracttest"> <identifier>/conf/ogcapppkg/deploy/response-duplicate</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/deploy/response-duplicate</value></classification><component class="test-purpose"><p id="_80c69f37-3434-9f0e-0f49-3a1a54f21887">Validate that the server return HTTP Status code 409</p>
</component><component class="test-method"><ol id="_ee201b92-63a3-c6dd-e811-11acc5228a4e" type="arabic"><li><p id="_83d1bd4c-7cf4-e9b9-8330-552ec0dd11e0">Validate that the response contains a document  content was returned with an HTTP status code of 409</p>
</li>
<li><p id="_0ef6510e-48ec-d728-da53-9b9254111b99">Validate that the document is conform to the JSON Schema: <link target="https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/schemas/common-core/exception.yaml">exception.yaml</link></p>
</li>
<li><p id="_ab26252b-fa3b-3eff-cd87-c7a0d4689837">Validate that the type of the exception is “http://www.opengis.net/def/exceptions/ogcapi-processes-2/1.0/duplicated-process”.</p>
</li>
</ol>
</component>
</requirement>
</clause>

<clause id="_replace_operation_2" obligation="normative">
<title>Replace operation</title>
<requirement id="ats_ogcapppkg_replace_body" model="ogc" type="abstracttest"> <identifier>/conf/ogcapppkg/replace/body</identifier><classification><tag>target</tag><value>/req/ogcapppkg/replace/body</value></classification><component class="test-purpose"><p id="_ed6668fd-b471-4900-c561-749e59bbabb6">Validate that the server supports OGC Application Package encoding</p>
</component><component class="test-method"><ol id="_718c8b88-acf1-089a-1574-c58d102b09f2" type="arabic"><li><p id="_bde3f7d6-76ce-c108-21cb-dd54f9cd4eff">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_fd003629-841b-bc7c-ac03-8adc5f14f5c5">Append <tt>/{processId}</tt> to each path, where <tt>{processId}</tt> is the process id retrieved from <xref target="ats_ogcapppkg_deploy_response-success">/conf/ogcapppkg/deploy/response-success</xref>.</p>
</li>
<li><p id="_afd04d12-5f96-9bf7-a7f3-3cfd50f18ff4">Issue an HTTP PUT request using the media type “application/ogcapppkg+json” with as body a default OGC Application Package or the application package URL, if any, for each path</p>
</li>
<li><p id="_ba1c5220-5319-414d-df6b-5890a635c6cc">Validate the response with <xref target="ats_ogcapppkg_replace_response">/conf/ogcapppkg/replace/response</xref></p>
</li>
</ol>
</component>
</requirement>

<requirement id="ats_ogcapppkg_replace_response" model="ogc" type="abstracttest"> <identifier>/conf/ogcapppkg/replace/response</identifier><classification><tag>target</tag><value>/req/deploy-replace-undeploy/response-success</value></classification><component class="test-purpose"><p id="_fe201073-38a3-4c62-1066-e96325b107d5">Validate that the server returns HTTP Status code 200, 202 or 204</p>
</component><component class="test-method"><ol id="_148297a3-9f4d-18cb-e9f3-d3615d307545" type="arabic"><li><p id="_7df31620-388f-4824-f00c-f6d77147e3ad">Validate that the status code is 200, 202 or 204.</p>
</li>
</ol>
</component>
</requirement>
</clause>
</clause>

<clause id="_conformance_class_docker" obligation="normative">
<title>Conformance Class Docker</title>
<requirement id="ats_docker" model="ogc" type="conformanceclass">
<title>Docker</title><identifier>http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/docker</identifier><subject><xref target="rc_docker">http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/docker</xref></subject><classification><tag>Target Type</tag><value>Web API</value></classification><requirement id="_707c8988-819b-1b51-22f0-a3b3fef0dd5d" model="ogc" type="verification"> <identifier>/conf/docker/deploy/body</identifier></requirement><requirement id="_5c257471-a8c0-8e60-87ec-d5cd893859dc" model="ogc" type="verification"> <identifier>/conf/docker/replace/body</identifier></requirement>

</requirement>

<clause id="_deploy_operation_3" obligation="normative">
<title>Deploy operation</title>
<requirement id="ats_docker_deploy_body" model="ogc" type="abstracttest"> <identifier>/conf/docker/deploy/body</identifier><classification><tag>target</tag><value>/rec/deploy-replace-undeploy/deploy/body-docker</value></classification><component class="test-purpose"><p id="_9672f185-35fa-4a60-16c3-739a221546b0">Validate that the server supports deploy operation using a Docker image as execution unit</p>
</component><component class="test-method"><ol id="_1799262f-89ce-9069-ea27-7a05bfcd8d63" type="arabic"><li><p id="_020be8d9-7fe6-5af8-fd63-a106fd9ac397">Retrieve all links from the landing page with “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” and /processes</p>
</li>
<li><p id="_45fe7a42-87d1-16c8-d13d-bdd69f590931">Issue an HTTP POST request using the media type “application/ogcapppkg+json” with as body a default OGC Application Package</p>
</li>
<li><p id="_0edab01f-422f-aafc-4a6c-afc68baf1b01">Validate the response with <xref target="ats_ogcapppkg_deploy_response">/conf/ogcapppkg/deploy/response</xref></p>
</li>
<li><p id="_640d8064-07b0-ef95-8e56-1e8624500478">Send the same POST request again</p>
</li>
<li><p id="_a3f3f74f-7a7f-cfc2-ae6f-a678448dbd8f">Validate the response with <xref target="ats_ogcapppkg_deploy_response-duplicate">/conf/ogcapppkg/deploy/response-duplicate</xref></p>
</li>
</ol>
</component>
</requirement>
</clause>

<clause id="_replace_operation_3" obligation="normative">
<title>Replace operation</title>
<requirement id="ats_docker_replace_body" model="ogc" type="abstracttest"> <identifier>/conf/docker/replace/body</identifier><classification><tag>target</tag><value>/req/docker/replace/body</value></classification><component class="test-purpose"><p id="_f7936cd2-d8cc-9b91-1c23-9013004e7271">Validate that the server support replace operation using a Docker image as execution unit</p>
</component><component class="test-method"><ol id="_8a94ba7f-a648-46a7-29b8-a2e1a2281ab9" type="arabic"><li><p id="_319d9ccd-0af2-64da-1d17-cce44633af4c">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_c4a3469d-9c86-2ecc-091d-261f77040cfb">Append <tt>/{processId}</tt> to each path, where <tt>{processId}</tt> is the process id retrieved from <xref target="ats_ogcapppkg_deploy_response-success">/conf/ogcapppkg/deploy/response-success</xref>.</p>
</li>
<li><p id="_eaa05b1c-3f5c-e1ae-34ee-c6d34c10c1d4">Send a PUT request for one path using the media type “application/ogcapppkg+json” with as body a default OGC Application Package</p>
</li>
<li><p id="_3d983be4-0fa2-525a-445f-9283076e7ffb">Validate the response with <xref target="ats_ogcapppkg_replace_response">/conf/ogcapppkg/replace/response</xref></p>
</li>
</ol>
</component>
</requirement>
</clause>
</clause>

<clause id="_conformance_class_cwl" obligation="normative">
<title>Conformance Class CWL</title>
<requirement id="ats_cwl" model="ogc" type="conformanceclass">
<title>Common Workflow Language</title><identifier>http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/cwl</identifier><subject><xref target="rc_cwl">http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/cwl</xref></subject><classification><tag>Target Type</tag><value>Web API</value></classification><requirement id="_e459ee9a-d8d7-5ed9-37e0-ec1b6fc2ade1" model="ogc" type="verification"> <identifier>/conf/cwl/deploy/body</identifier></requirement><requirement id="_b4f34ebd-0a7f-210e-01ca-ec6c8646b6aa" model="ogc" type="verification"> <identifier>/conf/cwl/replace/body</identifier></requirement>

</requirement>

<clause id="_deploy_operation_4" obligation="normative">
<title>Deploy operation</title>
<requirement id="ats_cwl_deploy_body" model="ogc" type="abstracttest"> <identifier>/conf/cwl/deploy/body</identifier><classification><tag>target</tag><value>/req/cwl/deploy/body</value></classification><component class="test-purpose"><p id="_521530fa-d335-d916-0c78-71ef7ffca8dc">Validate that the server support deploy operation using the Common Workflow Language encoding</p>
</component><component class="test-method"><ol id="_51012768-5b2f-972e-0fe5-fe6bb56e5f54" type="arabic"><li><p id="_6b9e07ac-291c-a683-233c-9c8cecfd1d24">Retrieve all links from the landing page with “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” and /processes</p>
</li>
<li><p id="_452dd09c-b1d5-acc1-d3f4-939e066b4a2e">Issue an HTTP POST request using the media type “application/cwl” and the application package content</p>
</li>
<li><p id="_94bcefe1-518a-1145-4768-7e5c6f004293">Validate the response with <xref target="ats_ogcapppkg_deploy_response">/conf/ogcapppkg/deploy/response</xref></p>
</li>
<li><p id="_10d5d9e4-29da-27db-46eb-0e9a508214c5">Send the same POST request again</p>
</li>
<li><p id="_340ee80a-e604-9313-6ead-64c54903bc19">Validate the response with <xref target="ats_ogcapppkg_deploy_response-duplicate">/conf/ogcapppkg/deploy/response-duplicate</xref></p>
</li>
</ol>
</component>
</requirement>
</clause>

<clause id="_replace_operation_4" obligation="normative">
<title>Replace operation</title>
<requirement id="ats_cwl_replace_body" model="ogc" type="abstracttest"> <identifier>/conf/cwl/replace/body</identifier><classification><tag>target</tag><value>/req/cwl/replace/body</value></classification><component class="test-purpose"><p id="_eb38354e-fe9a-57cd-77c6-b55a3e93848e">Validate that the server support replace operation using the Common Workflow Language encoding</p>
</component><component class="test-method"><ol id="_f4a755dd-b0e4-e01d-102c-304ed93b4658" type="arabic"><li><p id="_e0cd3d72-9a6d-310d-20fb-bcd101752b88">Construct a path for each “rel=http://www.opengis.net/def/rel/ogc/1.0/processes” link on the landing page as well as for the {root}/processes path.</p>
</li>
<li><p id="_9e978604-d966-5203-aada-a503d1511399">Append <tt>/{processId}</tt> to each path, where <tt>{processId}</tt> is a mutable process id.</p>
</li>
<li><p id="_8c44c4c8-cfbf-1d7f-45be-1f0cf7a4a115">Send a PUT request for one path using the media type “application/cwl” and the application package content</p>
</li>
<li><p id="_c162bc4f-c652-2fd1-396b-e583e3e83e1e">Validate the response with <xref target="ats_ogcapppkg_replace_response">/conf/ogcapppkg/replace/response</xref></p>
</li>
</ol>
</component>
</requirement>
</clause>
</clause>
</annex><annex id="_revision_history" obligation="informative">
<title>Revision History</title>
<table id="_42d84295-c636-bfca-d584-07b8c249262a" unnumbered="true"><colgroup><col width="12%"/><col width="18%"/><col width="12%"/><col width="12%"/><col width="46%"/></colgroup><thead><tr><th valign="middle" align="left">Date</th>
<th valign="middle" align="left">Release</th>
<th valign="middle" align="left">Editor</th>
<th valign="middle" align="left">Primary clauses modified</th>
<th valign="middle" align="left">Description</th>
</tr></thead>
<tbody><tr><td valign="middle" align="left">2020-05-19</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Panagiotis (Peter) A. Vretanos</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Initial check in of draft transactions extension.</td>
</tr><tr><td valign="middle" align="left">2020-06-23</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Panagiotis (Peter) A. Vretanos</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Add initial draft of an example Open API document</td>
</tr><tr><td valign="middle" align="left">2021-10-18</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Panagiotis (Peter) A. Vretanos</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Rename transaction directory to deploy_replace_undeploy.</td>
</tr><tr><td valign="middle" align="left">2022-10-04</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Use relative path to exception and problem+json</td>
</tr><tr><td valign="middle" align="left">2022-10-05</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Update the Deploy, Replace, Undeploy extension</td>
</tr><tr><td valign="middle" align="left">2022-12-12</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Change the status code to be returned (immutable)</td>
</tr><tr><td valign="middle" align="left">2023-02-20</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Panagiotis (Peter) A. Vretanos</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Realign abstract test with requirements.</td>
</tr><tr><td valign="middle" align="left">2023-05-30</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Update status code and schema.</td>
</tr><tr><td valign="middle" align="left">2023-10-16</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Add content to the Abstract Test Suite</td>
</tr><tr><td valign="middle" align="left">2023-11-28</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Update test for validating support of a given HTTP method</td>
</tr><tr><td valign="middle" align="left">2023-12-06</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Abstract Test Suite Updates</td>
</tr><tr><td valign="middle" align="left">2023-12-07</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Fix mixed status code and value in security consideration</td>
</tr><tr><td valign="middle" align="left">2023-12-08</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Add requirements for managing docker image as execution unit</td>
</tr><tr><td valign="middle" align="left">2024-04-26</td>
<td valign="middle" align="left">None</td>
<td valign="middle" align="left">Gérald Fenoy</td>
<td valign="middle" align="left">all</td>
<td valign="middle" align="left">Add section for retrieving formal description of a mutable process</td>
</tr></tbody>
</table>
</annex><bibliography><references id="_references" normative="true" obligation="informative">
<title>Normative references</title><p id="_307b20e2-9e40-db56-abbf-2822ab2941cc">The following documents are referred to in the text in such a way that some or all of their content constitutes requirements of this document. For dated references, only the edition cited applies. For undated references, the latest edition of the referenced document (including any amendments) applies.</p>
<bibitem id="OAProc-1" type="standard" schema-version="v1.2.9">
  <fetched>2024-08-28</fetched>
  
<title type="title-intro" format="text/plain" language="en" script="Latn">OGC API</title>

  
<title type="title-main" format="text/plain" language="en" script="Latn">Processes</title>

  
<title type="title-part" format="text/plain" language="en" script="Latn">Part 1: Core</title>

  
<title type="main" format="text/plain" language="en" script="Latn">OGC API — Processes — Part 1: Core</title>

  <uri type="src">http://www.opengis.net/doc/IS/ogcapi-processes-1/1.0.0</uri>
  <uri type="obp">https://docs.ogc.org/is/18-062r2/18-062r2.html</uri>
  <docidentifier type="OGC" primary="true">18-062r2</docidentifier>
  <date type="published">
    <on>2021-12-20</on>
  </date>
  <contributor>
    <role type="author"/>
    <person>
      
<name>  <completename>Benjamin Pross</completename> </name>

    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      
<name>  <completename>Panagiotis (Peter) A. Vretanos</completename> </name>

    </person>
  </contributor>
  <contributor>
    <role type="publisher"/>
    <organization>
      
<name>Open Geospatial Consortium</name>

    </organization>
  </contributor>
  <edition>2</edition>
  <language>en</language>
  <script>Latn</script>
  <abstract format="text/plain" language="en" script="Latn">The OGC API — Processes — Part 1: Core Standard supports the wrapping of computational tasks into executable processes that can be offered by a server through a Web API and be invoked by a client application. The standard specifies a processing interface to communicate over a RESTful protocol using JavaScript Object Notation (JSON) encodings. The standard leverages concepts from the OGC Web Processing Service (WPS) 2.0 Interface Standard but does not require implementation of a WPS.

By way of background and context, in many cases geospatial or location data, including data from sensors, must be processed before the information can be effectively used. The WPS Standard provides a standard interface that simplifies the task of making simple or complex computational geospatial processing services accessible via web services. Such services include well-known processes found in Geographic Information Systems (GIS) as well as specialized processes for spatiotemporal modeling and simulation. While the WPS standard was designed with spatial processing in mind, the standard could also be used to readily insert non-spatial processing tasks into a web services environment.

The OGC API — Processes Standard is a newer and more modern way of programming and interacting with resources over the web while allowing better integration into existing software packages. The OGC API — Processes Standard addresses all of the use cases that were addressed by the WPS Standard, while also leveraging the OpenAPI specification and a resource-oriented approach.

The resources that are provided by a server implementing the OGC API — Processes Standard are listed in Table 1 below and include information about the server, the list of available processes (Process list and Process description), jobs (running processes) and results of process executions.</abstract>
  
</bibitem>
<bibitem id="OAFeat-1" type="standard" schema-version="v1.2.9">
  <fetched>2024-08-28</fetched>
  
<title type="title-intro" format="text/plain" language="en" script="Latn">OGC API</title>

  
<title type="title-main" format="text/plain" language="en" script="Latn">Features</title>

  
<title type="title-part" format="text/plain" language="en" script="Latn">Part 1: Core</title>

  
<title type="main" format="text/plain" language="en" script="Latn">OGC API — Features — Part 1: Core</title>

  <uri type="src">http://www.opengis.net/doc/IS/ogcapi-features-1/1.0.0</uri>
  <uri type="obp">https://docs.ogc.org/is/17-069r3/17-069r3.html</uri>
  <docidentifier type="OGC" primary="true">17-069r3</docidentifier>
  <date type="published">
    <on>2019-10-07</on>
  </date>
  <contributor>
    <role type="author"/>
    <person>
      
<name>  <completename>Clemens Portele</completename> </name>

    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      
<name>  <completename>Panagiotis (Peter) A. Vretanos</completename> </name>

    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      
<name>  <completename>Charles Heazel</completename> </name>

    </person>
  </contributor>
  <contributor>
    <role type="publisher"/>
    <organization>
      
<name>Open Geospatial Consortium</name>

    </organization>
  </contributor>
  <edition>3</edition>
  <language>en</language>
  <script>Latn</script>
  <abstract format="text/plain" language="en" script="Latn">OGC API standards define modular API building blocks to spatially enable Web APIs in a consistent way. The OpenAPI specification is used to define the API building blocks.

The OGC API family of standards is organized by resource type. This standard specifies the fundamental API building blocks for interacting with features. The spatial data community uses the term ‘feature’ for things in the real world that are of interest.</abstract>
  
</bibitem>
</references><references id="Bibliography" normative="false" obligation="informative">
<title>Bibliography</title><bibitem id="OpenAPI-Spec">
  <formattedref format="application/x-isodoc+xml">OpenAPI Initiative. OpenAPI Specification 3.0.2. Available at:
<link target="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md"/>.</formattedref>
  <docidentifier>OpenAPI Specification 3.0.2</docidentifier>
  <docnumber>3.0.2</docnumber>
</bibitem><bibitem id="Common_Workflow_Language">
  <formattedref format="application/x-isodoc+xml">Peter Amstutz, Michael R. Crusoe, Nebojša Tijanić (editors), Brad Chapman, John Chilton, Michael Heuer, Andrey Kartashov, Dan Leehr, Hervé Ménager, Maya Nedeljkovich, Matt Scales, Stian Soiland-Reyes, Luka Stojanovic (2020): Common Workflow Language, v1.2. Specification, Common Workflow Language working group. <link target="https://w3id.org/cwl/"/></formattedref>
  <docidentifier type="metanorma">[2]</docidentifier>
</bibitem><bibitem id="OpenEO_Process_Graphs">
  <formattedref format="application/x-isodoc+xml">OpenEO: OpenEO Developers API Reference / Process Graphs. <link target="https://openeo.org/documentation/1.0/developers/api/reference.html#section/Processes/Process-Graphs"/></formattedref>
  <docidentifier type="metanorma">[3]</docidentifier>
</bibitem>



</references></bibliography>
</ogc-standard>
